{"version":3,"sources":["assets/heroes/cards/mercy-icon.webp","assets/heroes/cards/ana-icon.webp","assets/heroes/cards/baptiste-icon.webp","assets/heroes/cards/bastion-icon.webp","assets/heroes/cards/bob-icon.webp","assets/heroes/cards/hanzo-icon.webp","assets/heroes/cards/lucio-icon.webp","assets/heroes/cards/mei-icon.webp","assets/heroes/cards/orisa-icon.webp","assets/heroes/cards/sigma-icon.webp","assets/heroes/cards/torbjorn-icon.webp","assets/heroes/cards/widowmaker-icon.webp","assets/heroes/cards/wreckingball-icon.webp","assets/heroes/cards/zarya-icon.webp","assets/heroes/cards/zenyatta-icon.webp","assets/heroes/cards/card-back.webp","assets/audio/overwatch-theme.mp3","assets/audio sync /^/.*/.mp3$","assets/audio/ana-intro.mp3","assets/audio/ashe-intro.mp3","assets/audio/baptiste-intro.mp3","assets/audio/bastion-intro.mp3","assets/audio/brigitte-intro.mp3","assets/audio/doomfist-intro.mp3","assets/audio/dvameka-intro.mp3","assets/audio/echo-intro.mp3","assets/audio/genji-intro.mp3","assets/audio/hanzo-intro.mp3","assets/audio/junkrat-intro.mp3","assets/audio/lucio-intro.mp3","assets/audio/mccree-intro.mp3","assets/audio/mei-intro.mp3","assets/audio/mercy-intro.mp3","assets/audio/moira-intro.mp3","assets/audio/orisa-intro.mp3","assets/audio/pharah-intro.mp3","assets/audio/reaper-intro.mp3","assets/audio/reinhardt-intro.mp3","assets/audio/roadhog-intro.mp3","assets/audio/sigma-intro.mp3","assets/audio/soldier-intro.mp3","assets/audio/sombra-intro.mp3","assets/audio/symmetra-intro.mp3","assets/audio/torbjorn-intro.mp3","assets/audio/tracer-intro.mp3","assets/audio/widowmaker-intro.mp3","assets/audio/winston-intro.mp3","assets/audio/wreckingball-intro.mp3","assets/audio/zarya-intro.mp3","assets/audio/zenyatta-intro.mp3","assets/heroes/cards sync /^/.*/-icon/.webp$","assets/heroes/cards sync /^/.*/.webp$","assets/heroes/cards/ana.webp","assets/heroes/cards/ashe.webp","assets/heroes/cards/baptiste.webp","assets/heroes/cards/bastion.webp","assets/heroes/cards/bob.webp","assets/heroes/cards/brigitte.webp","assets/heroes/cards/doomfist.webp","assets/heroes/cards/dva.webp","assets/heroes/cards/dvameka.webp","assets/heroes/cards/echo.webp","assets/heroes/cards/genji.webp","assets/heroes/cards/hanzo.webp","assets/heroes/cards/junkrat.webp","assets/heroes/cards/lucio.webp","assets/heroes/cards/mccree.webp","assets/heroes/cards/mei.webp","assets/heroes/cards/mercy.webp","assets/heroes/cards/moira.webp","assets/heroes/cards/orisa.webp","assets/heroes/cards/pharah.webp","assets/heroes/cards/reaper.webp","assets/heroes/cards/reinhardt.webp","assets/heroes/cards/roadhog.webp","assets/heroes/cards/sigma.webp","assets/heroes/cards/soldier.webp","assets/heroes/cards/sombra.webp","assets/heroes/cards/symmetra.webp","assets/heroes/cards/torbjorn.webp","assets/heroes/cards/tracer.webp","assets/heroes/cards/widowmaker.webp","assets/heroes/cards/winston.webp","assets/heroes/cards/wreckingball.webp","assets/heroes/cards/zarya.webp","assets/heroes/cards/zenyatta.webp","assets/audio/ana-grenade.mp3","assets/audio/ana-ult.mp3","assets/audio/announcer-defeat.mp3","assets/audio/announcer-initiatingmatch.mp3","assets/audio/announcer-preparetoattack.mp3","assets/audio/announcer-round1.mp3","assets/audio/announcer-round2.mp3","assets/audio/announcer-round3.mp3","assets/audio/announcer-victory.mp3","assets/audio/ashe-bob.mp3","assets/audio/ashe-deadlockgang.mp3","assets/audio/baptiste-immortality.mp3","assets/audio/baptiste-notover.mp3","assets/audio/bastion-ult.mp3","assets/audio/brigitte-armour.mp3","assets/audio/brigitte-ult.mp3","assets/audio/doomfist-punch.mp3","assets/audio/doomfist-ult.mp3","assets/audio/dva-ult.mp3","assets/audio/dvameka-apm.mp3","assets/audio/dvameka-nerfthis.mp3","assets/audio/echo-burning.mp3","assets/audio/echo-ult.mp3","assets/audio/genji-cutting.mp3","assets/audio/genji-ult.mp3","assets/audio/hanzo-marked.mp3","assets/audio/hanzo-ult.mp3","assets/audio/junkrat-laugh.mp3","assets/audio/junkrat-ult.mp3","assets/audio/junkrat-ult2.mp3","assets/audio/lucio-ampitup.mp3","assets/audio/lucio-heal.mp3","assets/audio/lucio-ult.mp3","assets/audio/mccree-fishinabarrel.mp3","assets/audio/mccree-ult.mp3","assets/audio/mei-goticed.mp3","assets/audio/mei-ult.mp3","assets/audio/mercy-damageboost.mp3","assets/audio/mercy-heal.mp3","assets/audio/mercy-heal2.mp3","assets/audio/mercy-medicalemergency.mp3","assets/audio/mercy-ult.mp3","assets/audio/mercy-watchingover.mp3","assets/audio/moira-grasp.mp3","assets/audio/moira-ult.mp3","assets/audio/orisa-barrier.mp3","assets/audio/orisa-ult.mp3","assets/audio/pharah-clear.mp3","assets/audio/pharah-ult.mp3","assets/audio/reaper-intro2.mp3","assets/audio/reaper-lastwords.mp3","assets/audio/reaper-ult.mp3","assets/audio/reinhardt-barrier.mp3","assets/audio/reinhardt-ult.mp3","assets/audio/roadhog-hogwild.mp3","assets/audio/roadhog-hook.mp3","assets/audio/roadhog-hook2.mp3","assets/audio/roadhog-hook3.mp3","assets/audio/roadhog-intro2.mp3","assets/audio/sigma-barrier.mp3","assets/audio/sigma-ult.mp3","assets/audio/soldier-targetrich.mp3","assets/audio/soldier-teamheal.mp3","assets/audio/soldier-ult.mp3","assets/audio/sombra-hack.mp3","assets/audio/sombra-ult.mp3","assets/audio/symmetra-shield.mp3","assets/audio/symmetra-teleporter.mp3","assets/audio/torbjorn-turret.mp3","assets/audio/torbjorn-ult.mp3","assets/audio/tracer-dejavu.mp3","assets/audio/tracer-imback.mp3","assets/audio/tracer-intro2.mp3","assets/audio/tracer-smarts.mp3","assets/audio/widowmaker-noonecanhide-fr.mp3","assets/audio/widowmaker-noonecanhide.mp3","assets/audio/widowmaker-oneshot.mp3","assets/audio/widowmaker-widowskiss.mp3","assets/audio/winston-angry.mp3","assets/audio/winston-barrier.mp3","assets/audio/winston-intro2.mp3","assets/audio/winston-protect.mp3","assets/audio/winston-rescue.mp3","assets/audio/winston-takecover.mp3","assets/audio/wreckingball-shields.mp3","assets/audio/wreckingball-squeaks.mp3","assets/audio/wreckingball-ult.mp3","assets/audio/zarya-barrier.mp3","assets/audio/zarya-barrierally.mp3","assets/audio/zarya-ult.mp3","assets/audio/zenyatta-discord.mp3","assets/audio/zenyatta-discord2.mp3","assets/audio/zenyatta-harmony.mp3","assets/audio/zenyatta-ult.mp3","assets/heroes/cardfocus sync /^/.*/.webp$","assets/heroes/cardfocus/ana.webp","assets/heroes/cardfocus/ashe.webp","assets/heroes/cardfocus/baptiste.webp","assets/heroes/cardfocus/bastion.webp","assets/heroes/cardfocus/bob.webp","assets/heroes/cardfocus/brigitte.webp","assets/heroes/cardfocus/doomfist.webp","assets/heroes/cardfocus/dva.webp","assets/heroes/cardfocus/dvameka.webp","assets/heroes/cardfocus/echo.webp","assets/heroes/cardfocus/genji.webp","assets/heroes/cardfocus/hanzo.webp","assets/heroes/cardfocus/junkrat.webp","assets/heroes/cardfocus/lucio.webp","assets/heroes/cardfocus/mccree.webp","assets/heroes/cardfocus/mei.webp","assets/heroes/cardfocus/mercy.webp","assets/heroes/cardfocus/moira.webp","assets/heroes/cardfocus/orisa.webp","assets/heroes/cardfocus/pharah.webp","assets/heroes/cardfocus/reaper.webp","assets/heroes/cardfocus/reinhardt.webp","assets/heroes/cardfocus/roadhog.webp","assets/heroes/cardfocus/sigma.webp","assets/heroes/cardfocus/soldier.webp","assets/heroes/cardfocus/sombra.webp","assets/heroes/cardfocus/symmetra.webp","assets/heroes/cardfocus/torbjorn.webp","assets/heroes/cardfocus/tracer.webp","assets/heroes/cardfocus/widowmaker.webp","assets/heroes/cardfocus/winston.webp","assets/heroes/cardfocus/wreckingball.webp","assets/heroes/cardfocus/zarya.webp","assets/heroes/cardfocus/zenyatta.webp","assets/how-to-play.pdf","assets/overview.gif","assets/offence-classicon.webp","assets/defence-classicon.webp","assets/tank-classicon.webp","assets/support-classicon.webp","assets/dva-example.webp","assets/audio sync /^/.*/-intro/.mp3$","context/gameContext.js","context/turnContext.js","data.js","helper.js","components/layout/PlayerButtons.js","components/layout/PowerCounter.js","components/layout/MatchCounter.js","components/layout/HeroCounter.js","components/cards/CardEffects.js","assets/healthbackground-hexagon.png","components/cards/HealthCounter.js","components/cards/ShieldCounter.js","components/cards/Card.js","components/layout/CardDisplay.js","components/layout/PlayerArea.js","components/layout/SynergyCounter.js","components/layout/CounterArea.js","components/layout/BoardRow.js","components/layout/PlayerBoard.js","components/layout/PlayerHalf.js","assets/owlogo-small.webp","components/layout/AudioPlayer.js","components/layout/TitleCard.js","components/layout/Footer.js","components/cards/HeroAbilities.js","components/cards/CardFocus.js","components/layout/Tutorial.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","gameContext","createContext","turnContext","data","heroes","ana","name","image","icon","effects","anaUltimateEffect","hero","player","target","type","on","value","health","power","f","m","b","synergy","isImplemented","ashe","bob","bobEnemyEffect","baptiste","baptisteAllyEffect","bastion","bastionEnemyEffect","brigitte","doomfist","dvameka","dva","echo","genji","hanzo","hanzoEnemyEffect","junkrat","lucio","lucioAllyEffect","mccree","mei","meiEnemyEffect","mercy","mercyAllyEffect1","mercyAllyEffect2","moira","orisa","orisaAllyEffect","orisaUltimateEffect","pharah","reaper","reinhardt","roadhog","sigma","soldier","sombra","symmetra","torbjorn","torbjornEnemyEffect","tracer","widowmaker","widowmakerEnemyEffect","winston","wreckingball","wreckingballEnemyEffect","zarya","zaryaShieldRemaining","zenyatta","zenyattaAllyEffect","zenyattaEnemyEffect","playerCards","player1cards","cards","player2cards","rows","player1hand","cardIds","cardsPlayed","totalPower","values","this","reduce","a","player2hand","label","allyEffects","enemyEffects","shield","totalShield","shieldValue","PlayerCard","playerNum","heroId","heroData","playerHeroId","isPlayed","maxHealth","slice","newCard","isDiscarded","ability1Used","ability2Used","JSON","parse","stringify","key","console","log","getRandInt","min","max","Math","floor","random","PlayerHand","props","useContext","gameState","dispatch","turnState","setTurnState","parseInt","playerHandId","playerCardsId","handCards","nextCardDraw","setNextCardDraw","setCardFocus","className","disabled","length","onClick","ACTIONS","CREATE_CARD","payload","prevState","newCardId","randInt","randKey","ADD_CARD_TO_HAND","playerTurn","turnCount","PowerCounter","MatchCounter","matchState","wins","HeroCounter","rowId","src","require","default","alt","CardEffects","effect","HealthCounter","ShieldCounter","Card","useState","imageLoaded","setImageLoaded","index","getStyle","style","snapshot","isDropAnimating","transitionDuration","draggableId","isDragDisabled","provided","draggableProps","dragHandleProps","isDragging","ref","innerRef","onLoad","CardDisplay","direction","window","innerWidth","rowDirection","setRowDirection","addEventListener","windowWidth","listClass","droppableId","overflown","setOverflown","useEffect","element","document","getElementById","scrollHeight","clientHeight","scrollWidth","clientWidth","isDraggingOver","droppableProps","cardId","placeholder","PlayerArea","playerAreaId","SynergyCounter","CounterArea","BoardRow","isOverflown","rowPosition","synergyValue","rowShield","playerPower","SET_POWER","powerValue","PlayerBoard","PlayerHalf","AudioPlayer","playAudio","setPlayAudio","audio","volume","play","pause","loop","TitleCard","$","toggleClass","owlogo","Footer","HeroAbilities","enemyPlayerNum","unsetCardFocus","currentCard","targetRef","useRef","turnRef","enemiesHitByAbility","currentHeroAbilityRef","applyDamage","damageValue","targetCardId","targetRow","ignoreShields","targetPlayerNum","targetPlayerCards","targetHealth","targetShield","targetRowShield","targetRowAllyEffects","filter","targetRowEnemyEffects","totalRowEffect","targetCardAllyEffects","targetCardEnemyEffects","totalCardEffect","totalEffect","current","rowShieldDamage","i","err","DAMAGE_ROW_SHIELD","EDIT_CARD","editKeys","editValues","applyHealing","healingValue","targetMaxHealth","healingDone","abilities","ability1","audioFile","run","Promise","reject","closest","attr","off","enemyPlayer","playerRowCardIds","enemyPlayerRowCardIds","ability2","synergyCost","targetCardRow","targetCardIndex","targets","forEach","undefined","adjacentEnemy1","adjacentEnemy2","remainingHealing","UPDATE_CARD","updateKeys","updateValues","newRowId","MOVE_CARD","startRowId","finishRowId","startIndex","finishIndex","dvamekaIndex","DISCARD_CARD","dvaIndex","targetPlayer","targetCard","echoUltHeroId","localStorage","getItem","alert","maxTargets","ADD_ROW_EFFECT","effectId","targetRowId","junkratStartIndex","newRowPosition","targetRowCardIds","card","heroRowCardIds","rowEnemies","UPDATE_SYNERGY","abs","damagePerEnemy","damageDone","remainingDamage","applyRemainingDamage","ADD_CARD_EFFECT","mercyStartIndex","moiraAbility1Stage2","targetedPlayer","ADD_ROW_SHIELD","enemyBackRowCards","Array","from","enemyMiddleRowCards","enemyFrontRowCards","enemyRows","totalDamage","totalEnemyCards","row","SET_SYNERGY","newSynergyVal","teleportCardId","teleportCardIndex","teleportCardRow","newRow","EDIT_ROW","newEffects","UPDATE_ROW","torbPlayer","turretDamage","attackedEnemies","includes","push","winstonStartIndex","newShield","stopPropagation","Audio","rowSynergy","setItem","allyRowEffects","enemyRowEffects","cardEffects","CardFocus","cardFocus","heroRef","Tutorial","openCloseTutorial","removeClass","switchTutorialTab","targetId","hide","show","tutorialCounterStyle","display","justifyContent","alignItems","borderRadius","margin","fontFamily","powerStyle","width","height","backgroundColor","color","fontSize","synergyStyle","border","matchStyle","healthStyle","position","right","top","cursor","rel","href","hidden","REMOVE_EFFECTS","UPDATE_POWER","reducer","action","produce","draft","cardEffect","rowEffect","targetRowShieldArr","outer","x","splice","_","set","startRow","finishRow","newCardIds","newStartRowCardIds","newFinishRowCardIds","rowPower","newPower","newSynergy","App","useReducer","player1","player2","wonLastRound","setMatchState","player1Passed","player2Passed","matchRef","totalPower1","totalPower2","player1Rows","player2Rows","winningPlayer","player1Synergy","player2Synergy","location","reload","player1RowIds","player2RowIds","player1Cards","player2Cards","endRound","Provider","onDragEnd","result","destination","source","finishPosition","addSynergy","onDragStart","ReactDOM","render","StrictMode"],"mappings":"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6BCAzC,OAAe,cAA0B,oC,6BCAzC,OAAe,cAA0B,oC,6BCAzC,OAAe,cAA0B,oC,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,oC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,oC,6BCAzC,OAAe,cAA0B,uC,8BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,uD,6BCAzC,OAAe,cAA0B,uD,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,kD,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,6C,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,4C,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,kD,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,qC,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,oD,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,gD,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,6C,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,4C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,gD,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,wC,6BCAzC,OAAe,cAA0B,6C,6BCAzC,OAAe,cAA0B,iD,6BCAzC,OAAe,cAA0B,6C,6BCAzC,OAAe,cAA0B,0C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,wD,6BCAzC,OAAe,cAA0B,qD,6BCAzC,OAAe,cAA0B,gD,6BCAzC,OAAe,cAA0B,mD,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,6C,6BCAzC,OAAe,cAA0B,4C,6BCAzC,OAAe,cAA0B,6C,6BCAzC,OAAe,cAA0B,4C,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,kD,6BCAzC,OAAe,cAA0B,kD,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,8C,6BCAzC,OAAe,cAA0B,0C,gBCAzC,IAAIH,EAAM,CACT,aAAc,IACd,cAAe,IACf,kBAAm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","file":"static/js/main.a8d1c76e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mercy-icon.1002e6a1.webp\";","export default __webpack_public_path__ + \"static/media/ana-icon.ef641255.webp\";","export default __webpack_public_path__ + \"static/media/baptiste-icon.406ac962.webp\";","export default __webpack_public_path__ + \"static/media/bastion-icon.3f8ad7ba.webp\";","export default __webpack_public_path__ + \"static/media/bob-icon.a7f7923c.webp\";","export default __webpack_public_path__ + \"static/media/hanzo-icon.11c45fc6.webp\";","export default __webpack_public_path__ + \"static/media/lucio-icon.3b7e328a.webp\";","export default __webpack_public_path__ + \"static/media/mei-icon.4c904245.webp\";","export default __webpack_public_path__ + \"static/media/orisa-icon.1af705ba.webp\";","export default __webpack_public_path__ + \"static/media/sigma-icon.f85836fc.webp\";","export default __webpack_public_path__ + \"static/media/torbjorn-icon.b18fb5fc.webp\";","export default __webpack_public_path__ + \"static/media/widowmaker-icon.d8797c7b.webp\";","export default __webpack_public_path__ + \"static/media/wreckingball-icon.4ac35f9a.webp\";","export default __webpack_public_path__ + \"static/media/zarya-icon.2f71ebd2.webp\";","export default __webpack_public_path__ + \"static/media/zenyatta-icon.a957ec52.webp\";","export default __webpack_public_path__ + \"static/media/card-back.32b64822.webp\";","export default __webpack_public_path__ + \"static/media/overwatch-theme.76802417.mp3\";","var map = {\n\t\"./ana-grenade.mp3\": 123,\n\t\"./ana-intro.mp3\": 38,\n\t\"./ana-ult.mp3\": 124,\n\t\"./announcer-defeat.mp3\": 125,\n\t\"./announcer-initiatingmatch.mp3\": 126,\n\t\"./announcer-preparetoattack.mp3\": 127,\n\t\"./announcer-round1.mp3\": 128,\n\t\"./announcer-round2.mp3\": 129,\n\t\"./announcer-round3.mp3\": 130,\n\t\"./announcer-victory.mp3\": 131,\n\t\"./ashe-bob.mp3\": 132,\n\t\"./ashe-deadlockgang.mp3\": 133,\n\t\"./ashe-intro.mp3\": 39,\n\t\"./baptiste-immortality.mp3\": 134,\n\t\"./baptiste-intro.mp3\": 40,\n\t\"./baptiste-notover.mp3\": 135,\n\t\"./bastion-intro.mp3\": 41,\n\t\"./bastion-ult.mp3\": 136,\n\t\"./brigitte-armour.mp3\": 137,\n\t\"./brigitte-intro.mp3\": 42,\n\t\"./brigitte-ult.mp3\": 138,\n\t\"./doomfist-intro.mp3\": 43,\n\t\"./doomfist-punch.mp3\": 139,\n\t\"./doomfist-ult.mp3\": 140,\n\t\"./dva-ult.mp3\": 141,\n\t\"./dvameka-apm.mp3\": 142,\n\t\"./dvameka-intro.mp3\": 44,\n\t\"./dvameka-nerfthis.mp3\": 143,\n\t\"./echo-burning.mp3\": 144,\n\t\"./echo-intro.mp3\": 45,\n\t\"./echo-ult.mp3\": 145,\n\t\"./genji-cutting.mp3\": 146,\n\t\"./genji-intro.mp3\": 46,\n\t\"./genji-ult.mp3\": 147,\n\t\"./hanzo-intro.mp3\": 47,\n\t\"./hanzo-marked.mp3\": 148,\n\t\"./hanzo-ult.mp3\": 149,\n\t\"./junkrat-intro.mp3\": 48,\n\t\"./junkrat-laugh.mp3\": 150,\n\t\"./junkrat-ult.mp3\": 151,\n\t\"./junkrat-ult2.mp3\": 152,\n\t\"./lucio-ampitup.mp3\": 153,\n\t\"./lucio-heal.mp3\": 154,\n\t\"./lucio-intro.mp3\": 49,\n\t\"./lucio-ult.mp3\": 155,\n\t\"./mccree-fishinabarrel.mp3\": 156,\n\t\"./mccree-intro.mp3\": 50,\n\t\"./mccree-ult.mp3\": 157,\n\t\"./mei-goticed.mp3\": 158,\n\t\"./mei-intro.mp3\": 51,\n\t\"./mei-ult.mp3\": 159,\n\t\"./mercy-damageboost.mp3\": 160,\n\t\"./mercy-heal.mp3\": 161,\n\t\"./mercy-heal2.mp3\": 162,\n\t\"./mercy-intro.mp3\": 52,\n\t\"./mercy-medicalemergency.mp3\": 163,\n\t\"./mercy-ult.mp3\": 164,\n\t\"./mercy-watchingover.mp3\": 165,\n\t\"./moira-grasp.mp3\": 166,\n\t\"./moira-intro.mp3\": 53,\n\t\"./moira-ult.mp3\": 167,\n\t\"./orisa-barrier.mp3\": 168,\n\t\"./orisa-intro.mp3\": 54,\n\t\"./orisa-ult.mp3\": 169,\n\t\"./overwatch-theme.mp3\": 36,\n\t\"./pharah-clear.mp3\": 170,\n\t\"./pharah-intro.mp3\": 55,\n\t\"./pharah-ult.mp3\": 171,\n\t\"./reaper-intro.mp3\": 56,\n\t\"./reaper-intro2.mp3\": 172,\n\t\"./reaper-lastwords.mp3\": 173,\n\t\"./reaper-ult.mp3\": 174,\n\t\"./reinhardt-barrier.mp3\": 175,\n\t\"./reinhardt-intro.mp3\": 57,\n\t\"./reinhardt-ult.mp3\": 176,\n\t\"./roadhog-hogwild.mp3\": 177,\n\t\"./roadhog-hook.mp3\": 178,\n\t\"./roadhog-hook2.mp3\": 179,\n\t\"./roadhog-hook3.mp3\": 180,\n\t\"./roadhog-intro.mp3\": 58,\n\t\"./roadhog-intro2.mp3\": 181,\n\t\"./sigma-barrier.mp3\": 182,\n\t\"./sigma-intro.mp3\": 59,\n\t\"./sigma-ult.mp3\": 183,\n\t\"./soldier-intro.mp3\": 60,\n\t\"./soldier-targetrich.mp3\": 184,\n\t\"./soldier-teamheal.mp3\": 185,\n\t\"./soldier-ult.mp3\": 186,\n\t\"./sombra-hack.mp3\": 187,\n\t\"./sombra-intro.mp3\": 61,\n\t\"./sombra-ult.mp3\": 188,\n\t\"./symmetra-intro.mp3\": 62,\n\t\"./symmetra-shield.mp3\": 189,\n\t\"./symmetra-teleporter.mp3\": 190,\n\t\"./torbjorn-intro.mp3\": 63,\n\t\"./torbjorn-turret.mp3\": 191,\n\t\"./torbjorn-ult.mp3\": 192,\n\t\"./tracer-dejavu.mp3\": 193,\n\t\"./tracer-imback.mp3\": 194,\n\t\"./tracer-intro.mp3\": 64,\n\t\"./tracer-intro2.mp3\": 195,\n\t\"./tracer-smarts.mp3\": 196,\n\t\"./widowmaker-intro.mp3\": 65,\n\t\"./widowmaker-noonecanhide-fr.mp3\": 197,\n\t\"./widowmaker-noonecanhide.mp3\": 198,\n\t\"./widowmaker-oneshot.mp3\": 199,\n\t\"./widowmaker-widowskiss.mp3\": 200,\n\t\"./winston-angry.mp3\": 201,\n\t\"./winston-barrier.mp3\": 202,\n\t\"./winston-intro.mp3\": 66,\n\t\"./winston-intro2.mp3\": 203,\n\t\"./winston-protect.mp3\": 204,\n\t\"./winston-rescue.mp3\": 205,\n\t\"./winston-takecover.mp3\": 206,\n\t\"./wreckingball-intro.mp3\": 67,\n\t\"./wreckingball-shields.mp3\": 207,\n\t\"./wreckingball-squeaks.mp3\": 208,\n\t\"./wreckingball-ult.mp3\": 209,\n\t\"./zarya-barrier.mp3\": 210,\n\t\"./zarya-barrierally.mp3\": 211,\n\t\"./zarya-intro.mp3\": 68,\n\t\"./zarya-ult.mp3\": 212,\n\t\"./zenyatta-discord.mp3\": 213,\n\t\"./zenyatta-discord2.mp3\": 214,\n\t\"./zenyatta-harmony.mp3\": 215,\n\t\"./zenyatta-intro.mp3\": 69,\n\t\"./zenyatta-ult.mp3\": 216\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 37;","export default __webpack_public_path__ + \"static/media/ana-intro.ed77b6db.mp3\";","export default __webpack_public_path__ + \"static/media/ashe-intro.9286f130.mp3\";","export default __webpack_public_path__ + \"static/media/baptiste-intro.ff4eda23.mp3\";","export default __webpack_public_path__ + \"static/media/bastion-intro.da0169f9.mp3\";","export default __webpack_public_path__ + \"static/media/brigitte-intro.c0395844.mp3\";","export default __webpack_public_path__ + \"static/media/doomfist-intro.cdc4e0a8.mp3\";","export default __webpack_public_path__ + \"static/media/dvameka-intro.cd7aad32.mp3\";","export default __webpack_public_path__ + \"static/media/echo-intro.514af561.mp3\";","export default __webpack_public_path__ + \"static/media/genji-intro.3d4bad41.mp3\";","export default __webpack_public_path__ + \"static/media/hanzo-intro.6c136b77.mp3\";","export default __webpack_public_path__ + \"static/media/junkrat-intro.425041e9.mp3\";","export default __webpack_public_path__ + \"static/media/lucio-intro.98585741.mp3\";","export default __webpack_public_path__ + \"static/media/mccree-intro.5c95b11f.mp3\";","export default __webpack_public_path__ + \"static/media/mei-intro.266e07ac.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-intro.111280f6.mp3\";","export default __webpack_public_path__ + \"static/media/moira-intro.469c3328.mp3\";","export default __webpack_public_path__ + \"static/media/orisa-intro.33fe7bb0.mp3\";","export default __webpack_public_path__ + \"static/media/pharah-intro.17025e7a.mp3\";","export default __webpack_public_path__ + \"static/media/reaper-intro.8b3a3651.mp3\";","export default __webpack_public_path__ + \"static/media/reinhardt-intro.0fc43bf3.mp3\";","export default __webpack_public_path__ + \"static/media/roadhog-intro.7ef1d4f3.mp3\";","export default __webpack_public_path__ + \"static/media/sigma-intro.c5db42d3.mp3\";","export default __webpack_public_path__ + \"static/media/soldier-intro.22decc49.mp3\";","export default __webpack_public_path__ + \"static/media/sombra-intro.fba7b53b.mp3\";","export default __webpack_public_path__ + \"static/media/symmetra-intro.4cfb7b6e.mp3\";","export default __webpack_public_path__ + \"static/media/torbjorn-intro.988f9307.mp3\";","export default __webpack_public_path__ + \"static/media/tracer-intro.ce22d491.mp3\";","export default __webpack_public_path__ + \"static/media/widowmaker-intro.d3928b18.mp3\";","export default __webpack_public_path__ + \"static/media/winston-intro.aeace8aa.mp3\";","export default __webpack_public_path__ + \"static/media/wreckingball-intro.b811ff66.mp3\";","export default __webpack_public_path__ + \"static/media/zarya-intro.f178952d.mp3\";","export default __webpack_public_path__ + \"static/media/zenyatta-intro.05d9522b.mp3\";","var map = {\n\t\"./ana-icon.webp\": 20,\n\t\"./baptiste-icon.webp\": 21,\n\t\"./bastion-icon.webp\": 22,\n\t\"./bob-icon.webp\": 23,\n\t\"./hanzo-icon.webp\": 24,\n\t\"./lucio-icon.webp\": 25,\n\t\"./mei-icon.webp\": 26,\n\t\"./mercy-icon.webp\": 15,\n\t\"./orisa-icon.webp\": 27,\n\t\"./sigma-icon.webp\": 28,\n\t\"./torbjorn-icon.webp\": 29,\n\t\"./widowmaker-icon.webp\": 30,\n\t\"./wreckingball-icon.webp\": 31,\n\t\"./zarya-icon.webp\": 32,\n\t\"./zenyatta-icon.webp\": 33\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 81;","var map = {\n\t\"./ana-icon.webp\": 20,\n\t\"./ana.webp\": 88,\n\t\"./ashe.webp\": 89,\n\t\"./baptiste-icon.webp\": 21,\n\t\"./baptiste.webp\": 90,\n\t\"./bastion-icon.webp\": 22,\n\t\"./bastion.webp\": 91,\n\t\"./bob-icon.webp\": 23,\n\t\"./bob.webp\": 92,\n\t\"./brigitte.webp\": 93,\n\t\"./card-back.webp\": 35,\n\t\"./doomfist.webp\": 94,\n\t\"./dva.webp\": 95,\n\t\"./dvameka.webp\": 96,\n\t\"./echo.webp\": 97,\n\t\"./genji.webp\": 98,\n\t\"./hanzo-icon.webp\": 24,\n\t\"./hanzo.webp\": 99,\n\t\"./junkrat.webp\": 100,\n\t\"./lucio-icon.webp\": 25,\n\t\"./lucio.webp\": 101,\n\t\"./mccree.webp\": 102,\n\t\"./mei-icon.webp\": 26,\n\t\"./mei.webp\": 103,\n\t\"./mercy-icon.webp\": 15,\n\t\"./mercy.webp\": 104,\n\t\"./moira.webp\": 105,\n\t\"./orisa-icon.webp\": 27,\n\t\"./orisa.webp\": 106,\n\t\"./pharah.webp\": 107,\n\t\"./reaper.webp\": 108,\n\t\"./reinhardt.webp\": 109,\n\t\"./roadhog.webp\": 110,\n\t\"./sigma-icon.webp\": 28,\n\t\"./sigma.webp\": 111,\n\t\"./soldier.webp\": 112,\n\t\"./sombra.webp\": 113,\n\t\"./symmetra.webp\": 114,\n\t\"./torbjorn-icon.webp\": 29,\n\t\"./torbjorn.webp\": 115,\n\t\"./tracer.webp\": 116,\n\t\"./widowmaker-icon.webp\": 30,\n\t\"./widowmaker.webp\": 117,\n\t\"./winston.webp\": 118,\n\t\"./wreckingball-icon.webp\": 31,\n\t\"./wreckingball.webp\": 119,\n\t\"./zarya-icon.webp\": 32,\n\t\"./zarya.webp\": 120,\n\t\"./zenyatta-icon.webp\": 33,\n\t\"./zenyatta.webp\": 121\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 87;","export default __webpack_public_path__ + \"static/media/ana.f21cf0bd.webp\";","export default __webpack_public_path__ + \"static/media/ashe.4575eec4.webp\";","export default __webpack_public_path__ + \"static/media/baptiste.9c203755.webp\";","export default __webpack_public_path__ + \"static/media/bastion.cb8da306.webp\";","export default __webpack_public_path__ + \"static/media/bob.79645f57.webp\";","export default __webpack_public_path__ + \"static/media/brigitte.aa2a859f.webp\";","export default __webpack_public_path__ + \"static/media/doomfist.b42cdbec.webp\";","export default __webpack_public_path__ + \"static/media/dva.140b2110.webp\";","export default __webpack_public_path__ + \"static/media/dvameka.7f620abf.webp\";","export default __webpack_public_path__ + \"static/media/echo.f69246a1.webp\";","export default __webpack_public_path__ + \"static/media/genji.f7c52bc2.webp\";","export default __webpack_public_path__ + \"static/media/hanzo.2a0196fe.webp\";","export default __webpack_public_path__ + \"static/media/junkrat.949766b6.webp\";","export default __webpack_public_path__ + \"static/media/lucio.927d650e.webp\";","export default __webpack_public_path__ + \"static/media/mccree.5ddc6093.webp\";","export default __webpack_public_path__ + \"static/media/mei.0ecc8b58.webp\";","export default __webpack_public_path__ + \"static/media/mercy.1e3d1c49.webp\";","export default __webpack_public_path__ + \"static/media/moira.76448291.webp\";","export default __webpack_public_path__ + \"static/media/orisa.0a88cb1c.webp\";","export default __webpack_public_path__ + \"static/media/pharah.396a9410.webp\";","export default __webpack_public_path__ + \"static/media/reaper.abc3cbbf.webp\";","export default __webpack_public_path__ + \"static/media/reinhardt.e8af8881.webp\";","export default __webpack_public_path__ + \"static/media/roadhog.bd89c152.webp\";","export default __webpack_public_path__ + \"static/media/sigma.ac5a5e0e.webp\";","export default __webpack_public_path__ + \"static/media/soldier.17acbba7.webp\";","export default __webpack_public_path__ + \"static/media/sombra.05fb7707.webp\";","export default __webpack_public_path__ + \"static/media/symmetra.47ccd99e.webp\";","export default __webpack_public_path__ + \"static/media/torbjorn.e9c30c5a.webp\";","export default __webpack_public_path__ + \"static/media/tracer.9a639c4b.webp\";","export default __webpack_public_path__ + \"static/media/widowmaker.bcdba939.webp\";","export default __webpack_public_path__ + \"static/media/winston.ac78d4f8.webp\";","export default __webpack_public_path__ + \"static/media/wreckingball.4a6a1e0c.webp\";","export default __webpack_public_path__ + \"static/media/zarya.4b954cf5.webp\";","export default __webpack_public_path__ + \"static/media/zenyatta.1bf39970.webp\";","export default __webpack_public_path__ + \"static/media/ana-grenade.f80883bc.mp3\";","export default __webpack_public_path__ + \"static/media/ana-ult.2e34290d.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-defeat.752ab770.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-initiatingmatch.819b0838.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-preparetoattack.137439a1.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-round1.05b4f85f.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-round2.fd334bab.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-round3.624f4180.mp3\";","export default __webpack_public_path__ + \"static/media/announcer-victory.4a5845e3.mp3\";","export default __webpack_public_path__ + \"static/media/ashe-bob.36eeca7e.mp3\";","export default __webpack_public_path__ + \"static/media/ashe-deadlockgang.bd98b6cc.mp3\";","export default __webpack_public_path__ + \"static/media/baptiste-immortality.27b9af85.mp3\";","export default __webpack_public_path__ + \"static/media/baptiste-notover.0d22d8cd.mp3\";","export default __webpack_public_path__ + \"static/media/bastion-ult.b8af96ec.mp3\";","export default __webpack_public_path__ + \"static/media/brigitte-armour.41b57cbf.mp3\";","export default __webpack_public_path__ + \"static/media/brigitte-ult.5526abc8.mp3\";","export default __webpack_public_path__ + \"static/media/doomfist-punch.05702c67.mp3\";","export default __webpack_public_path__ + \"static/media/doomfist-ult.c046b23c.mp3\";","export default __webpack_public_path__ + \"static/media/dva-ult.cfce27a6.mp3\";","export default __webpack_public_path__ + \"static/media/dvameka-apm.f6d0d0fb.mp3\";","export default __webpack_public_path__ + \"static/media/dvameka-nerfthis.7232d735.mp3\";","export default __webpack_public_path__ + \"static/media/echo-burning.b3de34e4.mp3\";","export default __webpack_public_path__ + \"static/media/echo-ult.fd2a5c35.mp3\";","export default __webpack_public_path__ + \"static/media/genji-cutting.7ccea757.mp3\";","export default __webpack_public_path__ + \"static/media/genji-ult.c69d24f0.mp3\";","export default __webpack_public_path__ + \"static/media/hanzo-marked.079d5219.mp3\";","export default __webpack_public_path__ + \"static/media/hanzo-ult.ae5213fa.mp3\";","export default __webpack_public_path__ + \"static/media/junkrat-laugh.7eaafa68.mp3\";","export default __webpack_public_path__ + \"static/media/junkrat-ult.2100f67c.mp3\";","export default __webpack_public_path__ + \"static/media/junkrat-ult2.52bc219b.mp3\";","export default __webpack_public_path__ + \"static/media/lucio-ampitup.047c0758.mp3\";","export default __webpack_public_path__ + \"static/media/lucio-heal.3917c344.mp3\";","export default __webpack_public_path__ + \"static/media/lucio-ult.00910e50.mp3\";","export default __webpack_public_path__ + \"static/media/mccree-fishinabarrel.90cacf35.mp3\";","export default __webpack_public_path__ + \"static/media/mccree-ult.b02795d4.mp3\";","export default __webpack_public_path__ + \"static/media/mei-goticed.85c85415.mp3\";","export default __webpack_public_path__ + \"static/media/mei-ult.d026f0ed.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-damageboost.caa15b51.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-heal.3c95609f.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-heal2.44f791db.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-medicalemergency.ec7a8ffa.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-ult.c672d241.mp3\";","export default __webpack_public_path__ + \"static/media/mercy-watchingover.ea7e66e5.mp3\";","export default __webpack_public_path__ + \"static/media/moira-grasp.a7fcffe3.mp3\";","export default __webpack_public_path__ + \"static/media/moira-ult.a44822fd.mp3\";","export default __webpack_public_path__ + \"static/media/orisa-barrier.4a2ea800.mp3\";","export default __webpack_public_path__ + \"static/media/orisa-ult.74fddc72.mp3\";","export default __webpack_public_path__ + \"static/media/pharah-clear.b1067cd1.mp3\";","export default __webpack_public_path__ + \"static/media/pharah-ult.3a99301d.mp3\";","export default __webpack_public_path__ + \"static/media/reaper-intro2.a6515d7c.mp3\";","export default __webpack_public_path__ + \"static/media/reaper-lastwords.9e365a93.mp3\";","export default __webpack_public_path__ + \"static/media/reaper-ult.55c62576.mp3\";","export default __webpack_public_path__ + \"static/media/reinhardt-barrier.0e99cebd.mp3\";","export default __webpack_public_path__ + \"static/media/reinhardt-ult.e1012347.mp3\";","export default __webpack_public_path__ + \"static/media/roadhog-hogwild.59c2de16.mp3\";","export default __webpack_public_path__ + \"static/media/roadhog-hook.158ac2dd.mp3\";","export default __webpack_public_path__ + \"static/media/roadhog-hook2.ed1f13b0.mp3\";","export default __webpack_public_path__ + \"static/media/roadhog-hook3.59ef57d0.mp3\";","export default __webpack_public_path__ + \"static/media/roadhog-intro2.cbfea062.mp3\";","export default __webpack_public_path__ + \"static/media/sigma-barrier.94cc5bd4.mp3\";","export default __webpack_public_path__ + \"static/media/sigma-ult.700e751b.mp3\";","export default __webpack_public_path__ + \"static/media/soldier-targetrich.fcfff085.mp3\";","export default __webpack_public_path__ + \"static/media/soldier-teamheal.69123907.mp3\";","export default __webpack_public_path__ + \"static/media/soldier-ult.bc22da81.mp3\";","export default __webpack_public_path__ + \"static/media/sombra-hack.27085e76.mp3\";","export default __webpack_public_path__ + \"static/media/sombra-ult.99360398.mp3\";","export default __webpack_public_path__ + \"static/media/symmetra-shield.0492ae75.mp3\";","export default __webpack_public_path__ + \"static/media/symmetra-teleporter.fd96367d.mp3\";","export default __webpack_public_path__ + \"static/media/torbjorn-turret.08913351.mp3\";","export default __webpack_public_path__ + \"static/media/torbjorn-ult.aed62c22.mp3\";","export default __webpack_public_path__ + \"static/media/tracer-dejavu.fef0e4ad.mp3\";","export default __webpack_public_path__ + \"static/media/tracer-imback.460b74be.mp3\";","export default __webpack_public_path__ + \"static/media/tracer-intro2.34f5db5e.mp3\";","export default __webpack_public_path__ + \"static/media/tracer-smarts.dd95f288.mp3\";","export default __webpack_public_path__ + \"static/media/widowmaker-noonecanhide-fr.6d6d39ca.mp3\";","export default __webpack_public_path__ + \"static/media/widowmaker-noonecanhide.213ac538.mp3\";","export default __webpack_public_path__ + \"static/media/widowmaker-oneshot.8e11352d.mp3\";","export default __webpack_public_path__ + \"static/media/widowmaker-widowskiss.ac17dc8a.mp3\";","export default __webpack_public_path__ + \"static/media/winston-angry.cd912135.mp3\";","export default __webpack_public_path__ + \"static/media/winston-barrier.c9a2a1b8.mp3\";","export default __webpack_public_path__ + \"static/media/winston-intro2.b0e26cb6.mp3\";","export default __webpack_public_path__ + \"static/media/winston-protect.341bf8d1.mp3\";","export default __webpack_public_path__ + \"static/media/winston-rescue.9a122297.mp3\";","export default __webpack_public_path__ + \"static/media/winston-takecover.beeb7008.mp3\";","export default __webpack_public_path__ + \"static/media/wreckingball-shields.1f0e56cc.mp3\";","export default __webpack_public_path__ + \"static/media/wreckingball-squeaks.59935b49.mp3\";","export default __webpack_public_path__ + \"static/media/wreckingball-ult.1652f10e.mp3\";","export default __webpack_public_path__ + \"static/media/zarya-barrier.a90a1f87.mp3\";","export default __webpack_public_path__ + \"static/media/zarya-barrierally.7239bac8.mp3\";","export default __webpack_public_path__ + \"static/media/zarya-ult.745447cb.mp3\";","export default __webpack_public_path__ + \"static/media/zenyatta-discord.27155d73.mp3\";","export default __webpack_public_path__ + \"static/media/zenyatta-discord2.a9977a2b.mp3\";","export default __webpack_public_path__ + \"static/media/zenyatta-harmony.89d8bb7a.mp3\";","export default __webpack_public_path__ + \"static/media/zenyatta-ult.e686d6ac.mp3\";","var map = {\n\t\"./ana.webp\": 218,\n\t\"./ashe.webp\": 219,\n\t\"./baptiste.webp\": 220,\n\t\"./bastion.webp\": 221,\n\t\"./bob.webp\": 222,\n\t\"./brigitte.webp\": 223,\n\t\"./doomfist.webp\": 224,\n\t\"./dva.webp\": 225,\n\t\"./dvameka.webp\": 226,\n\t\"./echo.webp\": 227,\n\t\"./genji.webp\": 228,\n\t\"./hanzo.webp\": 229,\n\t\"./junkrat.webp\": 230,\n\t\"./lucio.webp\": 231,\n\t\"./mccree.webp\": 232,\n\t\"./mei.webp\": 233,\n\t\"./mercy.webp\": 234,\n\t\"./moira.webp\": 235,\n\t\"./orisa.webp\": 236,\n\t\"./pharah.webp\": 237,\n\t\"./reaper.webp\": 238,\n\t\"./reinhardt.webp\": 239,\n\t\"./roadhog.webp\": 240,\n\t\"./sigma.webp\": 241,\n\t\"./soldier.webp\": 242,\n\t\"./sombra.webp\": 243,\n\t\"./symmetra.webp\": 244,\n\t\"./torbjorn.webp\": 245,\n\t\"./tracer.webp\": 246,\n\t\"./widowmaker.webp\": 247,\n\t\"./winston.webp\": 248,\n\t\"./wreckingball.webp\": 249,\n\t\"./zarya.webp\": 250,\n\t\"./zenyatta.webp\": 251\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 217;","export default __webpack_public_path__ + \"static/media/ana.27b24324.webp\";","export default __webpack_public_path__ + \"static/media/ashe.25d47733.webp\";","export default __webpack_public_path__ + \"static/media/baptiste.ef237f05.webp\";","export default __webpack_public_path__ + \"static/media/bastion.93f18e60.webp\";","export default __webpack_public_path__ + \"static/media/bob.78db3f74.webp\";","export default __webpack_public_path__ + \"static/media/brigitte.1123850c.webp\";","export default __webpack_public_path__ + \"static/media/doomfist.24abf47e.webp\";","export default __webpack_public_path__ + \"static/media/dva.f53fb64f.webp\";","export default __webpack_public_path__ + \"static/media/dvameka.17ff5d0d.webp\";","export default __webpack_public_path__ + \"static/media/echo.9c48c864.webp\";","export default __webpack_public_path__ + \"static/media/genji.42203710.webp\";","export default __webpack_public_path__ + \"static/media/hanzo.12f07134.webp\";","export default __webpack_public_path__ + \"static/media/junkrat.78efd11a.webp\";","export default __webpack_public_path__ + \"static/media/lucio.ea94aec0.webp\";","export default __webpack_public_path__ + \"static/media/mccree.665bc197.webp\";","export default __webpack_public_path__ + \"static/media/mei.728860f3.webp\";","export default __webpack_public_path__ + \"static/media/mercy.2bcfe65c.webp\";","export default __webpack_public_path__ + \"static/media/moira.7b7c8c7e.webp\";","export default __webpack_public_path__ + \"static/media/orisa.192c2040.webp\";","export default __webpack_public_path__ + \"static/media/pharah.b9bbdfa5.webp\";","export default __webpack_public_path__ + \"static/media/reaper.6cfe32ce.webp\";","export default __webpack_public_path__ + \"static/media/reinhardt.ee4a6eff.webp\";","export default __webpack_public_path__ + \"static/media/roadhog.d6b792e7.webp\";","export default __webpack_public_path__ + \"static/media/sigma.707417d9.webp\";","export default __webpack_public_path__ + \"static/media/soldier.0690c755.webp\";","export default __webpack_public_path__ + \"static/media/sombra.05e2805c.webp\";","export default __webpack_public_path__ + \"static/media/symmetra.1a56ef68.webp\";","export default __webpack_public_path__ + \"static/media/torbjorn.de0529e7.webp\";","export default __webpack_public_path__ + \"static/media/tracer.77102316.webp\";","export default __webpack_public_path__ + \"static/media/widowmaker.80ad561b.webp\";","export default __webpack_public_path__ + \"static/media/winston.67e98a27.webp\";","export default __webpack_public_path__ + \"static/media/wreckingball.8bf7859e.webp\";","export default __webpack_public_path__ + \"static/media/zarya.36bac2b8.webp\";","export default __webpack_public_path__ + \"static/media/zenyatta.8855781e.webp\";","export default __webpack_public_path__ + \"static/media/how-to-play.6e96acc1.pdf\";","export default __webpack_public_path__ + \"static/media/overview.35cc1d25.gif\";","export default __webpack_public_path__ + \"static/media/offence-classicon.ce452cc8.webp\";","export default __webpack_public_path__ + \"static/media/defence-classicon.c7b31cd6.webp\";","export default __webpack_public_path__ + \"static/media/tank-classicon.9685a6ce.webp\";","export default __webpack_public_path__ + \"static/media/support-classicon.c69e52e0.webp\";","export default __webpack_public_path__ + \"static/media/dva-example.b1be49c7.webp\";","var map = {\n\t\"./ana-intro.mp3\": 38,\n\t\"./ashe-intro.mp3\": 39,\n\t\"./baptiste-intro.mp3\": 40,\n\t\"./bastion-intro.mp3\": 41,\n\t\"./brigitte-intro.mp3\": 42,\n\t\"./doomfist-intro.mp3\": 43,\n\t\"./dvameka-intro.mp3\": 44,\n\t\"./echo-intro.mp3\": 45,\n\t\"./genji-intro.mp3\": 46,\n\t\"./hanzo-intro.mp3\": 47,\n\t\"./junkrat-intro.mp3\": 48,\n\t\"./lucio-intro.mp3\": 49,\n\t\"./mccree-intro.mp3\": 50,\n\t\"./mei-intro.mp3\": 51,\n\t\"./mercy-intro.mp3\": 52,\n\t\"./moira-intro.mp3\": 53,\n\t\"./orisa-intro.mp3\": 54,\n\t\"./pharah-intro.mp3\": 55,\n\t\"./reaper-intro.mp3\": 56,\n\t\"./reinhardt-intro.mp3\": 57,\n\t\"./roadhog-intro.mp3\": 58,\n\t\"./sigma-intro.mp3\": 59,\n\t\"./soldier-intro.mp3\": 60,\n\t\"./sombra-intro.mp3\": 61,\n\t\"./symmetra-intro.mp3\": 62,\n\t\"./torbjorn-intro.mp3\": 63,\n\t\"./tracer-intro.mp3\": 64,\n\t\"./widowmaker-intro.mp3\": 65,\n\t\"./winston-intro.mp3\": 66,\n\t\"./wreckingball-intro.mp3\": 67,\n\t\"./zarya-intro.mp3\": 68,\n\t\"./zenyatta-intro.mp3\": 69\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 261;","import { createContext } from 'react';\r\n\r\nconst gameContext = createContext(null);\r\n\r\nexport default gameContext;","import { createContext } from 'react';\r\n\r\nconst turnContext = createContext(null);\r\n\r\nexport default turnContext;","// Data for all hero cards\r\n\r\n/* hero effects API is as follows:\r\n\r\nplayer: ally, enemy\r\n  target: \r\n    card, \r\n    row\r\n  type: \r\n    damage,  //affects hero damage\r\n    attack,  // attacks enemy when triggered \r\n    healing, \r\n    synergy, \r\n    power\r\n  value:      // how much more damage/healing etc to be added\r\n    integer, \r\n    double, \r\n    allies,   // proportionate to the number of allies, usually in a given row\r\n  on:         // when does the effect take place\r\n    turnstart, \r\n    movein, \r\n    moveout, \r\n    attack, \r\n    heal, \r\n    activate, // effect triggers once when ability is activated, never again \r\n    ability,  // usage of any of a card's abilities\r\n    ultimate,  // usage of a card's ultimate ability\r\n\r\n*/\r\n\r\nconst data = {\r\n  heroes: {\r\n    ana: {\r\n      id: \"ana\",\r\n      name: \"Ana\",\r\n      image: \"assets/heroes/ana.png\",\r\n      icon: \"assets/heroes/ana-icon.png\",\r\n      effects: {\r\n        anaUltimateEffect: {\r\n          id: \"anaUltimateEffect\",\r\n          hero: \"ana\",\r\n          player: \"ally\",\r\n          target: \"row\",\r\n          type: \"power\",\r\n          on: \"activate\",\r\n          value: \"allies\",\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 2,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    ashe: {\r\n      id: \"ashe\",\r\n      name: \"Ashe\",\r\n      image: \"assets/heroes/ashe.png\",\r\n      health: 3,\r\n      power: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      isImplemented: false,\r\n\r\n      bob: {\r\n        id: \"bob\",\r\n        name: \"Bob\",\r\n        image: \"assets/heroes/bob.png\",\r\n        icon: \"assets/heroes/bob-icon.png\",\r\n        effects: {\r\n          bobEnemyEffect: {\r\n            id: \"bobEnemyEffect\",\r\n            hero: \"bob\",\r\n            player: \"enemy\",\r\n            target: \"row\",\r\n            type: \"synergy\",\r\n            on: \"ultimate\",\r\n            value: 2,\r\n          },\r\n        },\r\n        health: 3,\r\n        power: {\r\n          f: 1,\r\n          m: 1,\r\n          b: 1,\r\n        },\r\n        synergy: {\r\n          f: 0,\r\n          m: 0,\r\n          b: 0,\r\n        },\r\n      },\r\n    },\r\n\r\n    baptiste: {\r\n      id: \"baptiste\",\r\n      name: \"Baptiste\",\r\n      image: \"assets/heroes/baptiste.png\",\r\n      icon: \"assets/heroes/baptiste-icon.png\",\r\n      effects: {\r\n        baptisteAllyEffect: {\r\n          id: \"baptisteAllyEffect\",\r\n          hero: \"baptiste\",\r\n          player: \"ally\",\r\n          target: \"row\",\r\n          health: 3,\r\n          type: \"immortality\",\r\n          on: \"activate\",\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    bastion: {\r\n      id: \"bastion\",\r\n      name: \"Bastion\",\r\n      image: \"assets/heroes/bastion.png\",\r\n      icon: \"assets/heroes/bastion-icon.png\",\r\n      effects: {\r\n        bastionEnemyEffect: {\r\n          id: \"bastionEnemyEffect\",\r\n          hero: \"bastion\",\r\n          player: \"enemy\",\r\n          target: \"row\",\r\n          type: \"attack\",\r\n          value: 2,\r\n          on: \"movein\",\r\n        },\r\n      },\r\n      health: 5,\r\n      power: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    brigitte: {\r\n      id: \"brigitte\",\r\n      name: \"Brigitte\",\r\n      image: \"assets/heroes/brigitte.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    doomfist: {\r\n      id: \"doomfist\",\r\n      name: \"Doomfist\",\r\n      image: \"assets/heroes/doomfist.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    dvameka: {\r\n      id: \"dvameka\",\r\n      name: \"D.va + Meka\",\r\n      image: \"assets/heroes/dvameka.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n\r\n      dva: {\r\n        id: \"dva\",\r\n        name: \"D.va\",\r\n        image: \"assets/heroes/dva.png\",\r\n        health: 2,\r\n        power: {\r\n          f: 1,\r\n          m: 1,\r\n          b: 1,\r\n        },\r\n        synergy: {\r\n          f: 0,\r\n          m: 0,\r\n          b: 0,\r\n        },\r\n        isImplemented: true,\r\n      },\r\n    },\r\n\r\n    echo: {\r\n      id: \"echo\",\r\n      name: \"Echo\",\r\n      image: \"assets/heroes/echo.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 1,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    genji: {\r\n      id: \"genji\",\r\n      name: \"Genji\",\r\n      image: \"assets/heroes/genji.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    hanzo: {\r\n      id: \"hanzo\",\r\n      name: \"Hanzo\",\r\n      image: \"assets/heroes/hanzo.png\",\r\n      icon: \"assets/heroes/hanzo-icon.png\",\r\n      effects: {\r\n        hanzoEnemyEffect: {\r\n          id: \"hanzoEnemyEffect\",\r\n          hero: \"hanzo\",\r\n          player: \"enemy\",\r\n          target: \"row\",\r\n          type: \"damage\",\r\n          on: \"attack\",\r\n          value: 1,\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 1,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    junkrat: {\r\n      id: \"junkrat\",\r\n      name: \"Junkrat\",\r\n      image: \"assets/heroes/junkrat.png\",\r\n      health: 3,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    lucio: {\r\n      id: \"lucio\",\r\n      name: \"Lucio\",\r\n      image: \"assets/heroes/lucio.png\",\r\n      icon: \"assets/heroes/lucio-icon.png\",\r\n      effects: {\r\n        lucioAllyEffect: {\r\n          id: \"lucioAllyEffect\",\r\n          hero: \"lucio\",\r\n          player: \"ally\",\r\n          target: \"row\",\r\n          type: \"healing\",\r\n          on: \"turnstart\",\r\n          value: 1,\r\n        },\r\n      },\r\n      health: 3,\r\n      power: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    mccree: {\r\n      id: \"mccree\",\r\n      name: \"McCree\",\r\n      image: \"assets/heroes/mccree.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    mei: {\r\n      id: \"mei\",\r\n      name: \"Mei\",\r\n      image: \"assets/heroes/mei.png\",\r\n      icon: \"assets/heroes/mei-icon.png\",\r\n      effects: {\r\n        meiEnemyEffect: {\r\n          id: \"meiEnemyEffect\",\r\n          hero: \"mei\",\r\n          player: \"enemy\",\r\n          target: \"row\",\r\n          type: \"synergy\",\r\n          value: \"double\",\r\n          on: \"ultimate\",\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    mercy: {\r\n      id: \"mercy\",\r\n      name: \"Mercy\",\r\n      image: \"assets/heroes/mercy.png\",\r\n      icon: \"assets/heroes/mercy-icon.png\",\r\n      effects: {\r\n        mercyAllyEffect1: {\r\n          id: \"mercyAllyEffect1\",\r\n          hero: \"mercy\",\r\n          player: \"ally\",\r\n          target: \"card\",\r\n          type: \"healing\",\r\n          on: \"turnstart\",\r\n          value: 1,\r\n        },\r\n        mercyAllyEffect2: {\r\n          id: \"mercyAllyEffect2\",\r\n          hero: \"mercy\",\r\n          player: \"ally\",\r\n          target: \"card\",\r\n          type: \"damage\",\r\n          value: 1,\r\n          on: \"attack\",\r\n        },\r\n      },\r\n      health: 3,\r\n      power: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n    moira: {\r\n      id: \"moira\",\r\n      name: \"Moira\",\r\n      image: \"assets/heroes/moira.png\",\r\n      health: 3,\r\n      power: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    orisa: {\r\n      id: \"orisa\",\r\n      name: \"Orisa\",\r\n      image: \"assets/heroes/orisa.png\",\r\n      icon: \"assets/heroes/orisa-icon.png\",\r\n      effects: {\r\n        orisaAllyEffect: {\r\n          id: \"orisaAllyEffect\",\r\n          hero: \"orisa\",\r\n          player: \"ally\",\r\n          target: \"row\",\r\n          type: \"damage\",\r\n          on: \"attack\",\r\n          value: -1,\r\n        },\r\n        orisaUltimateEffect: {\r\n          id: \"orisaUltimateEffect\",\r\n          hero: \"orisa\",\r\n          player: \"ally\",\r\n          target: \"row\",\r\n          type: \"power\",\r\n          on: \"activate\",\r\n          value: \"allies\",\r\n        },\r\n      },\r\n      health: 5,\r\n      power: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    pharah: {\r\n      id: \"pharah\",\r\n      name: \"Pharah\",\r\n      image: \"assets/heroes/pharah.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 1,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n    reaper: {\r\n      id: \"reaper\",\r\n      name: \"Reaper\",\r\n      image: \"assets/heroes/reaper.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    reinhardt: {\r\n      id: \"reinhardt\",\r\n      name: \"Reinhardt\",\r\n      image: \"assets/heroes/reinhardt.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    roadhog: {\r\n      id: \"roadhog\",\r\n      name: \"Roadhog\",\r\n      image: \"assets/heroes/roadhog.png\",\r\n      health: 5,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    sigma: {\r\n      id: \"sigma\",\r\n      name: \"Sigma\",\r\n      image: \"assets/heroes/sigma.png\",\r\n      icon: \"assets/heroes/sigma-icon.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 1,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 3,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    soldier: {\r\n      id: \"soldier\",\r\n      name: \"Soldier 76\",\r\n      image: \"assets/heroes/soldier.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    sombra: {\r\n      id: \"sombra\",\r\n      name: \"Sombra\",\r\n      image: \"assets/heroes/sombra.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    symmetra: {\r\n      id: \"symmetra\",\r\n      name: \"Symmetra\",\r\n      image: \"assets/heroes/symmetra.png\",\r\n      health: 3,\r\n      power: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    torbjorn: {\r\n      id: \"torbjorn\",\r\n      name: \"Torbjorn\",\r\n      image: \"assets/heroes/torbjorn.png\",\r\n      icon: \"assets/heroes/torbjorn-icon.png\",\r\n      effects: {\r\n        torbjornEnemyEffect: {\r\n          id: \"torbjornEnemyEffect\",\r\n          hero: \"torbjorn\",\r\n          player: \"enemy\",\r\n          target: \"row\",\r\n          type: \"attack\",\r\n          on: \"turnstart\",\r\n          value: 1,\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 1,\r\n        b: 2,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 3,\r\n        b: 2,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    tracer: {\r\n      id: \"tracer\",\r\n      name: \"Tracer\",\r\n      image: \"assets/heroes/tracer.png\",\r\n      health: 3,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    widowmaker: {\r\n      id: \"widowmaker\",\r\n      name: \"Widowmaker\",\r\n      image: \"assets/heroes/widowmaker.png\",\r\n      icon: \"assets/heroes/widowmaker-icon.png\",\r\n      effects: {\r\n        widowmakerEnemyEffect: {\r\n          id: \"widowmakerEnemyEffect\",\r\n          hero: \"widowmaker\",\r\n          player: \"enemy\",\r\n          target: \"row\",\r\n          type: \"damage\",\r\n          on: \"attack\",\r\n          value: 1,\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    winston: {\r\n      id: \"winston\",\r\n      name: \"Winston\",\r\n      image: \"assets/heroes/winston.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 3,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 1,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: true,\r\n    },\r\n\r\n    wreckingball: {\r\n      id: \"wreckingball\",\r\n      name: \"Wrecking Ball\",\r\n      image: \"assets/heroes/wreckingball.png\",\r\n      icon: \"assets/heroes/wreckingball-icon.png\",\r\n      effects: {\r\n        wreckingballEnemyEffect: {\r\n          id: \"wreckingballEnemyEffect\",\r\n          hero: \"wreckingball\",\r\n          player: \"enemy\",\r\n          target: \"row\",\r\n          type: \"attack\",\r\n          value: 2,\r\n          on: \"ability\",\r\n          health: \"synergy\",\r\n        },\r\n      },\r\n      health: 3,\r\n      power: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n\r\n    zarya: {\r\n      id: \"zarya\",\r\n      name: \"Zarya\",\r\n      image: \"assets/heroes/zarya.png\",\r\n      icon: \"assets/heroes/zarya-icon.png\",\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 3,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 1,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n      zaryaShieldRemaining: 0,\r\n    },\r\n\r\n    zenyatta: {\r\n      id: \"zenyatta\",\r\n      name: \"Zenyatta\",\r\n      image: \"assets/heroes/zenyatta.png\",\r\n      icon: \"assets/heroes/zenyatta-icon.png\",\r\n      effects: {\r\n        zenyattaAllyEffect: {\r\n          id: \"zenyattaAllyEffect\",\r\n          hero: \"zenyatta\",\r\n          player: \"ally\",\r\n          target: \"card\",\r\n          type: \"healing\",\r\n          on: \"turnstart\",\r\n          value: 1,\r\n        },\r\n        zenyattaEnemyEffect: {\r\n          id: \"zenyattaEnemyEffect\",\r\n          hero: \"zenyatta\",\r\n          player: \"enemy\",\r\n          target: \"card\",\r\n          type: \"damage\",\r\n          on: \"attack\",\r\n          value: 1,\r\n        },\r\n      },\r\n      health: 4,\r\n      power: {\r\n        f: 2,\r\n        m: 2,\r\n        b: 1,\r\n      },\r\n      synergy: {\r\n        f: 2,\r\n        m: 2,\r\n        b: 3,\r\n      },\r\n      isImplemented: false,\r\n    },\r\n  },\r\n  playerCards: {\r\n    player1cards: {\r\n      id: \"player1cards\",\r\n      cards: {},\r\n    },\r\n    player2cards: {\r\n      id: \"player2cards\",\r\n      cards: {},\r\n    },\r\n  },\r\n  rows: {\r\n    player1hand: {\r\n      id: \"player1hand\",\r\n      cardIds: [],\r\n      cardsPlayed: 0,\r\n      power: {\r\n        f: 0,\r\n        m: 0,\r\n        b: 0,\r\n      },\r\n      totalPower() {\r\n        const totalPower = Object.values(this.power).reduce((a, b) => a + b, 0);\r\n        return totalPower;\r\n      },\r\n    },\r\n    player2hand: {\r\n      id: \"player2hand\",\r\n      cardIds: [],\r\n      cardsPlayed: 0,\r\n      power: {\r\n        f: 0,\r\n        m: 0,\r\n        b: 0,\r\n      },\r\n      totalPower() {\r\n        const totalPower = Object.values(this.power).reduce((a, b) => a + b, 0);\r\n        return totalPower;\r\n      },\r\n    },\r\n    \"1b\": {\r\n      id: \"1b\",\r\n      label: \"Back\",\r\n      cardIds: [],\r\n      synergy: 0,\r\n      allyEffects: [],\r\n      enemyEffects: [],\r\n      shield: [],\r\n      totalShield() {\r\n        let totalShield = 0;\r\n        for (let shieldEntry of this.shield) {\r\n          totalShield += shieldEntry.shieldValue;\r\n        }\r\n        return totalShield;\r\n      },\r\n    },\r\n    \"1m\": {\r\n      id: \"1m\",\r\n      label: \"Middle\",\r\n      cardIds: [],\r\n      synergy: 0,\r\n      allyEffects: [],\r\n      enemyEffects: [],\r\n      shield: [],\r\n      totalShield() {\r\n        let totalShield = 0;\r\n        for (let shieldEntry of this.shield) {\r\n          totalShield += shieldEntry.shieldValue;\r\n        }\r\n        return totalShield;\r\n      },\r\n    },\r\n    \"1f\": {\r\n      id: \"1f\",\r\n      label: \"Front\",\r\n      cardIds: [],\r\n      synergy: 0,\r\n      allyEffects: [],\r\n      enemyEffects: [],\r\n      shield: [],\r\n      totalShield() {\r\n        let totalShield = 0;\r\n        for (let shieldEntry of this.shield) {\r\n          totalShield += shieldEntry.shieldValue;\r\n        }\r\n        return totalShield;\r\n      },\r\n    },\r\n    \"2f\": {\r\n      id: \"2f\",\r\n      label: \"Front\",\r\n      cardIds: [],\r\n      synergy: 0,\r\n      allyEffects: [],\r\n      enemyEffects: [],\r\n      shield: [],\r\n      totalShield() {\r\n        let totalShield = 0;\r\n        for (let shieldEntry of this.shield) {\r\n          totalShield += shieldEntry.shieldValue;\r\n        }\r\n        return totalShield;\r\n      },\r\n    },\r\n    \"2m\": {\r\n      id: \"2m\",\r\n      label: \"Middle\",\r\n      cardIds: [],\r\n      synergy: 0,\r\n      allyEffects: [],\r\n      enemyEffects: [],\r\n      shield: [],\r\n      totalShield() {\r\n        let totalShield = 0;\r\n        for (let shieldEntry of this.shield) {\r\n          totalShield += shieldEntry.shieldValue;\r\n        }\r\n        return totalShield;\r\n      },\r\n    },\r\n    \"2b\": {\r\n      id: \"2b\",\r\n      label: \"Back\",\r\n      cardIds: [],\r\n      synergy: 0,\r\n      allyEffects: [],\r\n      enemyEffects: [],\r\n      shield: [],\r\n      totalShield() {\r\n        let totalShield = 0;\r\n        for (let shieldEntry of this.shield) {\r\n          totalShield += shieldEntry.shieldValue;\r\n        }\r\n        return totalShield;\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default data;\r\n","import data from \"data\";\r\n\r\n// Creates a card with its own health and id unique to the playerCard, returns player-specific ID\r\nclass PlayerCard {\r\n  constructor(playerNum, heroId) {\r\n    this.playerNum = playerNum;\r\n    this.heroId = heroId;\r\n\r\n    // Get card values from data\r\n    let heroData = data.heroes[heroId];\r\n\r\n    // Assign values not held in data\r\n    const playerHeroId = `${playerNum}${heroId}`;\r\n    let shield = 0;\r\n    const enemyEffects = [];\r\n    const allyEffects = [];\r\n    let isPlayed = false;\r\n    let isDiscarded = false;\r\n    let ability1Used = false;\r\n    let ability2Used = false;\r\n    const maxHealth = heroData.health;\r\n\r\n    // Summoned heroes contain special path\r\n    if (heroId === \"dva\") {\r\n      heroData = data.heroes.dvameka[\"dva\"];\r\n      isPlayed = true;\r\n      // Slice used below to allow for echo's ultimate copying ashe\r\n    } else if (heroId.slice(0, 3) === \"bob\") {\r\n      heroData = data.heroes.ashe[\"bob\"];\r\n    }\r\n\r\n    // Combine values into one new hero object and assign to relevant player\r\n    const newCard = {\r\n      playerHeroId,\r\n      ...heroData,\r\n      maxHealth,\r\n      shield,\r\n      enemyEffects,\r\n      allyEffects,\r\n      isPlayed,\r\n      isDiscarded,\r\n      ability1Used,\r\n      ability2Used,\r\n    };\r\n\r\n    // Add hero effects to card, and insert playerHeroId for future use\r\n    if (\"effects\" in heroData) {\r\n      // Deep copy of effects object is needed in order to not alter the original object later on\r\n      let effects = JSON.parse(JSON.stringify(heroData.effects));\r\n      for (let key in effects) {\r\n        effects[key][\"playerHeroId\"] = playerHeroId;\r\n      }\r\n      newCard[\"effects\"] = effects;\r\n    }\r\n\r\n    console.log(newCard);\r\n\r\n    return newCard;\r\n  }\r\n}\r\n\r\n// Helper function - returns random number between min (inc) and max (exc)\r\nconst getRandInt = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\n// Helper function to check if the div element is overflowing\r\nfunction isOverflown(element) {\r\n  return (\r\n    element.scrollHeight > element.clientHeight ||\r\n    element.scrollWidth > element.clientWidth\r\n  );\r\n}\r\n\r\nexport default getRandInt;\r\nexport { PlayerCard, isOverflown };\r\n","import React, { useContext } from \"react\";\r\nimport gameContext from \"context/gameContext\";\r\nimport turnContext from \"context/turnContext\";\r\nimport data from \"data\";\r\nimport getRandInt from \"helper\";\r\nimport { ACTIONS } from \"App\";\r\n\r\nexport default function PlayerHand(props) {\r\n  // Context\r\n  const { gameState, dispatch } = useContext(gameContext);\r\n  const { turnState, setTurnState } = useContext(turnContext);\r\n\r\n  // Variables\r\n  const playerNum = parseInt(props.playerNum);\r\n  const playerHandId = `player${playerNum}hand`;\r\n  const playerCardsId = `player${playerNum}cards`;\r\n  const handCards = gameState.rows[playerHandId].cardIds;\r\n  const nextCardDraw = props.nextCardDraw;\r\n  const setNextCardDraw = props.setNextCardDraw;\r\n  const setCardFocus = props.setCardFocus;\r\n\r\n  // Draws one random card and puts the card into the player's hand\r\n  function drawCards() {\r\n    // Draw specific card designated by nextCardDraw state\r\n    if (nextCardDraw[`player${playerNum}`] !== null) {\r\n      dispatch({\r\n        type: ACTIONS.CREATE_CARD,\r\n        payload: {\r\n          playerNum: playerNum,\r\n          heroId: nextCardDraw[`player${playerNum}`],\r\n        },\r\n      });\r\n      var playerHeroId = `${playerNum}${nextCardDraw[`player${playerNum}`]}`;\r\n      setNextCardDraw((prevState) => ({\r\n        ...prevState,\r\n        [`player${playerNum}`]: null,\r\n      }));\r\n\r\n      // Draw a random card id, then check if it was already drawn, if so draw again\r\n    } else {\r\n      let newCardId;\r\n      do {\r\n        const randInt = getRandInt(0, Object.keys(data.heroes).length);\r\n        const randKey = Object.keys(data.heroes)[randInt];\r\n        newCardId = data.heroes[randKey].id;\r\n        playerHeroId = `${props.playerNum}${newCardId}`;\r\n      } while (\r\n        playerHeroId in gameState.playerCards[playerCardsId].cards ||\r\n        data.heroes[newCardId].isImplemented === false\r\n      );\r\n      dispatch({\r\n        type: ACTIONS.CREATE_CARD,\r\n        payload: { playerNum: playerNum, heroId: newCardId },\r\n      });\r\n    }\r\n\r\n    // Add new card to player hand\r\n    dispatch({\r\n      type: ACTIONS.ADD_CARD_TO_HAND,\r\n      payload: {\r\n        playerNum: playerNum,\r\n        playerHeroId: playerHeroId,\r\n      },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"playerbuttons\">\r\n      <div className=\"common-buttons\">\r\n        <button\r\n          className=\"drawbutton\"\r\n          disabled={handCards.length >= 8}\r\n          onClick={drawCards}\r\n        >\r\n          Draw\r\n        </button>\r\n        <button\r\n          disabled={!(turnState.playerTurn === playerNum)}\r\n          className=\"endturnbutton\"\r\n          onClick={\r\n            turnState.playerTurn === 1\r\n              ? () =>\r\n                  setTurnState((prevState) => ({\r\n                    ...prevState,\r\n                    turnCount: prevState.turnCount + 1,\r\n                    playerTurn: 2,\r\n                  }))\r\n              : () =>\r\n                  setTurnState((prevState) => ({\r\n                    ...prevState,\r\n                    turnCount: prevState.turnCount + 1,\r\n                    playerTurn: 1,\r\n                  }))\r\n          }\r\n        >\r\n          End Turn\r\n        </button>\r\n      </div>\r\n      <button\r\n        disabled={\r\n          !(gameState.rows[`player${playerNum}hand`].cardsPlayed >= 6) ||\r\n          turnState[`player${playerNum}Passed`] === true\r\n        }\r\n        className=\"passbutton\"\r\n        onClick={() => {\r\n          setTurnState((prevState) => ({\r\n            ...prevState,\r\n            [`player${playerNum}Passed`]: true,\r\n          }));\r\n        }}\r\n      >\r\n        Pass\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","export default function PowerCounter(props) {\r\n  return (\r\n    <span className=\"power\">\r\n      <span\r\n        id={`player${props.playerNum}power`}\r\n        className=\"powercounter counter\"\r\n      >\r\n        <span id={props.id} className=\"powervalue\">\r\n          {props.power}\r\n        </span>\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nexport default function MatchCounter(props) {\r\n  const matchState = props.matchState;\r\n  const playerNum = props.playerNum;\r\n  \r\n  return(\r\n    <div className=\"matchcountercontainer\">\r\n      <div id={`player${playerNum}matchcounter`} className=\"matchcounter counter\">\r\n        {matchState[`player${playerNum}`].wins}\r\n      </div>\r\n    </div>\r\n  );\r\n}","export default function HeroCounter(props) {\r\n  const playerHeroId = props.playerHeroId;\r\n  const heroId = props.heroId;\r\n  const playerNum = props.playerNum;\r\n  const rowId = props.rowId;\r\n  const health = props.health;\r\n\r\n  return (\r\n    <div\r\n      className=\"counter\"\r\n      onClick={() =>\r\n        props.setCardFocus({ playerHeroId: playerHeroId, rowId: rowId })\r\n      }\r\n    >\r\n      <img\r\n        src={require(`assets/heroes/cards/${heroId}-icon.webp`).default}\r\n        className=\"counter herocounter\"\r\n        alt=\"Hero Counter\"\r\n      />\r\n      {health && (\r\n        <span className=\"herocounterhealth\">\r\n          <h4>{health}</h4>\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import HeroCounter from \"components/layout/HeroCounter\";\r\n\r\nexport default function CardEffects(props) {\r\n  const type = props.type;\r\n  const effects = props.effects;\r\n\r\n  return (\r\n    <div className={`effectscontainer ${type}effects`}>\r\n      {effects.length > 0 ? (\r\n        <div className={`effects counterarea`}>\r\n          {effects &&\r\n            effects.map((effect) => {\r\n              return (\r\n                <HeroCounter\r\n                  heroId={effect.hero}\r\n                  key={effect.hero}\r\n                  playerHeroId={effect.playerHeroId}\r\n                  health={effect.health}\r\n                  setCardFocus={props.setCardFocus}\r\n                />\r\n              );\r\n            })}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/healthbackground-hexagon.f117e55d.png\";","import background from \"assets/healthbackground-hexagon.png\";\r\n\r\nexport default function HealthCounter(props) {\r\n  const type = props.type;\r\n\r\n  return (\r\n    <div className={`healthcounter counter ${type}`}>\r\n      <span className=\"healthvalue\">{props.health}</span>\r\n    </div>\r\n  );\r\n}\r\n","export default function ShieldCounter(props) {\r\n  const shield = props.shield;\r\n  const type = props.type;\r\n\r\n  return (\r\n    <div className={`shieldcounter counter ${type}`}>\r\n      <span className=\"shieldvalue\">{shield}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport gameContext from \"context/gameContext\";\r\nimport turnContext from \"context/turnContext\";\r\nimport CardEffects from \"components/cards/CardEffects\";\r\nimport HealthCounter from \"components/cards/HealthCounter\";\r\nimport ShieldCounter from \"components/cards/ShieldCounter\";\r\n\r\nexport default function Card(props) {\r\n  // Context\r\n  const { gameState, dispatch } = useContext(gameContext);\r\n  const { turnState, setTurnState } = useContext(turnContext);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  // Variables\r\n  const playerHeroId = props.playerHeroId;\r\n  const playerNum = props.playerNum;\r\n  const playerCardsId = `player${playerNum}cards`;\r\n  const rowId = props.rowId;\r\n  const rowPosition = rowId[1];\r\n  const index = props.index;\r\n\r\n  // Get card attributes from relevant player\r\n  const {\r\n    id,\r\n    name,\r\n    health,\r\n    power,\r\n    synergy,\r\n    shield,\r\n    enemyEffects,\r\n    allyEffects,\r\n    isPlayed,\r\n    isDiscarded,\r\n  } = gameState.playerCards[playerCardsId].cards[playerHeroId];\r\n\r\n  function getStyle(style, snapshot) {\r\n    if (!snapshot.isDropAnimating) return style;\r\n    return {\r\n      ...style,\r\n      transitionDuration: \"0.001s\",\r\n    };\r\n  }\r\n\r\n  return isDiscarded ? null : (\r\n    <Draggable\r\n      draggableId={playerHeroId}\r\n      index={index}\r\n      isDragDisabled={isPlayed || turnState.playerTurn !== playerNum}\r\n    >\r\n      {(provided, snapshot) => (\r\n        <div className={`cardcontainer`}>\r\n          <li\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            className={`${snapshot.isDragging ? \"dragging\" : \"not-dragging\"}`}\r\n            ref={provided.innerRef}\r\n            style={getStyle(provided.draggableProps.style, snapshot)}\r\n          >\r\n            {playerNum === 2 ? (\r\n              <CardEffects\r\n                type=\"enemy\"\r\n                effects={enemyEffects}\r\n                setCardFocus={props.setCardFocus}\r\n              />\r\n            ) : (\r\n              <CardEffects\r\n                type=\"ally\"\r\n                effects={allyEffects}\r\n                setCardFocus={props.setCardFocus}\r\n              />\r\n            )}\r\n            <div\r\n              id={`${playerHeroId}`}\r\n              className={`card ${health > 0 ? \"alive\" : \"dead\"}`}\r\n              onClick={\r\n                turnState.playerTurn === playerNum || isPlayed\r\n                  ? () => {\r\n                      props.setCardFocus({\r\n                        playerHeroId: playerHeroId,\r\n                        rowId: rowId,\r\n                      });\r\n                    }\r\n                  : null\r\n              }\r\n            >\r\n              {imageLoaded === playerHeroId &&\r\n                (turnState.playerTurn === playerNum || isPlayed ? (\r\n                  <HealthCounter type=\"cardcounter\" health={health} />\r\n                ) : null)}\r\n              {turnState.playerTurn === playerNum || isPlayed\r\n                ? shield > 0 && (\r\n                    <ShieldCounter type=\"cardcounter\" shield={shield} />\r\n                  )\r\n                : null}\r\n              <img\r\n                onLoad={() => setImageLoaded(playerHeroId)}\r\n                src={\r\n                  turnState.playerTurn === playerNum || isPlayed\r\n                    ? require(`assets/heroes/cards/${id}.webp`).default\r\n                    : require(\"assets/heroes/cards/card-back.webp\").default\r\n                }\r\n                className={`cardimg ${\r\n                  turnState.playerTurn === playerNum || isPlayed\r\n                    ? \"show-card\"\r\n                    : \"hide-card\"\r\n                }`}\r\n                alt={`${name} Card`}\r\n              />\r\n            </div>\r\n            {playerNum === 2 ? (\r\n              <CardEffects\r\n                type=\"ally\"\r\n                effects={allyEffects}\r\n                setCardFocus={props.setCardFocus}\r\n              />\r\n            ) : (\r\n              <CardEffects\r\n                type=\"enemy\"\r\n                effects={enemyEffects}\r\n                setCardFocus={props.setCardFocus}\r\n              />\r\n            )}\r\n          </li>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport Card from \"components/cards/Card\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport gameContext from \"context/gameContext\";\r\nimport $ from \"jquery\";\r\nimport { isOverflown } from \"helper\";\r\n\r\nexport default function CardDisplay(props) {\r\n  // Context & State\r\n  const { gameState } = useContext(gameContext);\r\n\r\n  // If a direction prop is passed in, use that for the direction.\r\n  // Otherwise, dynamically alter direction based on window width\r\n  const [rowDirection, setRowDirection] = useState(\r\n    props.direction\r\n      ? props.direction\r\n      : window.innerWidth > 1300\r\n      ? \"vertical\"\r\n      : \"horizontal\"\r\n  );\r\n  if (!props.direction) {\r\n    window.addEventListener(\"resize\", () => {\r\n      const windowWidth = window.innerWidth;\r\n      if (windowWidth > 1300) setRowDirection(\"vertical\");\r\n      else setRowDirection(\"horizontal\");\r\n    });\r\n  }\r\n\r\n  // Variables\r\n  const { rowId, playerNum, listClass, droppableId } = props;\r\n  const cards = gameState.rows[rowId].cardIds;\r\n  const [overflown, setOverflown] = useState(false);\r\n\r\n  // Checks if the row is overflown so that it can position cards inside correctly\r\n  useEffect(() => {\r\n    setOverflown(isOverflown(document.getElementById(`${rowId}-list`)));\r\n  }, [setOverflown, rowId, cards]);\r\n\r\n  return (\r\n    <div id={`${rowId}-carddisplay`} className={`carddisplay-container`}>\r\n      <Droppable droppableId={droppableId} direction={rowDirection}>\r\n        {(provided, snapshot) => (\r\n          <ul\r\n            id={`${rowId}-list`}\r\n            className={`cardlist ${listClass} ${\r\n              overflown ? \"overflown\" : \"\"\r\n            } ${rowDirection}  ${\r\n              snapshot.isDraggingOver ? \"dragging-over\" : \"\"\r\n            }`}\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {cards &&\r\n              cards.map((cardId, index) => {\r\n                return (\r\n                  <Card\r\n                    setCardFocus={props.setCardFocus}\r\n                    playerHeroId={cardId}\r\n                    key={cardId}\r\n                    playerNum={playerNum}\r\n                    rowId={props.rowId}\r\n                    index={index}\r\n                  />\r\n                );\r\n              })}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport PlayerHand from \"./PlayerButtons\";\r\nimport PowerCounter from \"./PowerCounter\";\r\nimport gameContext from \"context/gameContext\";\r\nimport MatchCounter from \"./MatchCounter\";\r\nimport CardDisplay from \"components/layout/CardDisplay\";\r\n\r\nexport default function PlayerArea(props) {\r\n  const { gameState } = useContext(gameContext);\r\n  const { playerNum } = props;\r\n\r\n  const playerAreaId = `player${playerNum}area`;\r\n  const totalPower = props.totalPower;\r\n  const playerHandId = `player${playerNum}hand`;\r\n  return (\r\n    <div id={playerAreaId} className=\"playerarea row\">\r\n      <div className=\"player-name-buttons\">\r\n        <div className=\"playerarea-section\">\r\n          <h1 className=\"playername\">Player {props.playerNum}</h1>\r\n          <PowerCounter playerNum={props.playerNum} power={totalPower} />\r\n        </div>\r\n        <PlayerHand\r\n          setCardFocus={props.setCardFocus}\r\n          playerNum={props.playerNum}\r\n          nextCardDraw={props.nextCardDraw}\r\n          setNextCardDraw={props.setNextCardDraw}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"playercards-row\">\r\n        <CardDisplay\r\n          playerNum={props.playerNum}\r\n          droppableId={`player${props.playerNum}hand`}\r\n          listClass={\"handlist\"}\r\n          rowId={playerHandId}\r\n          setCardFocus={props.setCardFocus}\r\n          direction=\"horizontal\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function SynergyCounter(props) {\r\n  return (\r\n    <div className=\"synergycontainer\">\r\n      <div className=\"synergycounter counter rowcounter\">\r\n        <span id={props.id}>\r\n          <h4>{props.synergy}</h4>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport gameContext from 'context/gameContext';\r\nimport HeroCounter from 'components/layout/HeroCounter';\r\n\r\nexport default function CounterArea(props) {\r\n  const { gameState } = useContext(gameContext);\r\n  const type = props.type;\r\n  const rowId = props.rowId;\r\n  \r\n  // Create icons array and store ids of hero with icons inside\r\n  const effects = [\r\n    ...gameState.rows[rowId].allyEffects,\r\n    ...gameState.rows[rowId].enemyEffects,\r\n  ];\r\n  \r\n  return(\r\n    <div className={`${type}-counterarea counterarea`}>\r\n      {effects && effects.map((effect) => {\r\n          return (\r\n            <HeroCounter \r\n              playerHeroId={effect.playerHeroId} \r\n              heroId={effect.hero}\r\n              key={effect.playerHeroId} \r\n              setCardFocus={props.setCardFocus} \r\n              playerNum={props.playerNum}\r\n              rowId={rowId}\r\n              health={effect.health}\r\n            />\r\n          );\r\n      })}\r\n    </div>\r\n  );\r\n};","import React, { useContext, useEffect, useState } from \"react\";\r\nimport gameContext from \"context/gameContext\";\r\nimport SynergyCounter from \"components/layout/SynergyCounter\";\r\nimport ShieldCounter from \"components/cards/ShieldCounter\";\r\nimport CounterArea from \"components/layout/CounterArea\";\r\nimport CardDisplay from \"components/layout/CardDisplay\";\r\nimport { ACTIONS } from \"App\";\r\nimport $ from \"jquery\";\r\nimport { isOverflown } from \"helper\";\r\n\r\nexport default function BoardRow(props) {\r\n  // Context\r\n  const { gameState, dispatch } = useContext(gameContext);\r\n  const [isOverflown, setIsOverflown] = useState(false);\r\n\r\n  // Variables\r\n  const rowId = props.rowId;\r\n  const rowPosition = props.rowId[1];\r\n  const playerNum = props.playerNum;\r\n  const synergyValue = gameState.rows[rowId].synergy;\r\n  const rowShield = gameState.rows[rowId].totalShield();\r\n\r\n  // Update synergy and power values anytime a card moves row\r\n  useEffect(() => {\r\n    let playerPower = 0;\r\n\r\n    // For every card in the row (that is alive), add up the power values\r\n    for (let cardId of gameState.rows[rowId].cardIds) {\r\n      if (\r\n        gameState.playerCards[`player${playerNum}cards`].cards[cardId].health >\r\n        0\r\n      ) {\r\n        playerPower +=\r\n          gameState.playerCards[`player${playerNum}cards`].cards[cardId].power[\r\n            rowPosition\r\n          ];\r\n      }\r\n    }\r\n\r\n    // Set power state\r\n    dispatch({\r\n      type: ACTIONS.SET_POWER,\r\n      payload: {\r\n        playerNum: playerNum,\r\n        rowPosition: rowPosition,\r\n        powerValue: playerPower,\r\n      },\r\n    });\r\n  }, [\r\n    gameState.rows,\r\n    gameState.playerCards,\r\n    dispatch,\r\n    playerNum,\r\n    rowId,\r\n    rowPosition,\r\n  ]);\r\n\r\n  // Detect if board row is overflown, and set class if it is\r\n\r\n  // TODO: not performing well\r\n  // $(function () {\r\n  //   const boardRow = document.getElementById(`${rowId}-boardrow`);\r\n  //   const rowList = document.getElementById(`${rowId}-list`);\r\n  //   const resizeObserver = new ResizeObserver((element) => {\r\n  //     if (checkIsOverflown(boardRow)) {\r\n  //       console.log(`${rowId} overflown`);\r\n  //       setIsOverflown(true);\r\n  //     } else {\r\n  //       setIsOverflown(false);\r\n  //     }\r\n  //   });\r\n  //   resizeObserver.observe(boardRow);\r\n  // });\r\n\r\n  return (\r\n    <div id={rowId} className=\"rowarea row\">\r\n      <div className=\"rowcountercontainer\">\r\n        <SynergyCounter synergy={synergyValue} />\r\n        <div className=\"rowcountercontainer2\">\r\n          {rowShield > 0 && (\r\n            <ShieldCounter type=\"rowcounter\" shield={rowShield} />\r\n          )}\r\n          <CounterArea\r\n            type={\"row\"}\r\n            setCardFocus={props.setCardFocus}\r\n            playerNum={props.playerNum}\r\n            rowId={props.rowId}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id={`${rowId}-boardrow`}\r\n        className={`boardrow ${isOverflown ? \"overflown\" : \"\"}`}\r\n      >\r\n        <div className=\"rowlabel\">\r\n          <span>{props.label}</span>\r\n          <span>Row</span>\r\n        </div>\r\n        <CardDisplay\r\n          playerNum={props.playerNum}\r\n          droppableId={props.rowId}\r\n          listClass=\"rowlist\"\r\n          rowId={props.rowId}\r\n          setCardFocus={props.setCardFocus}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import BoardRow from \"./BoardRow\";\r\nimport data from \"data\";\r\n\r\nexport default function PlayerBoard(props) {\r\n  const rows = data.rows;\r\n  \r\n  // Renders board rows according to the order in data.rows\r\n  // Not ideal, but apparently Object.keys order is reliable\r\n  return (\r\n    <div id={`player${props.playerNum}board`} className=\"board\">\r\n      {Object.keys(rows).map((rowId) => {\r\n        if (parseInt(rowId[0]) === props.playerNum) {\r\n          return (\r\n            <BoardRow\r\n              setCardFocus={props.setCardFocus}\r\n              playerNum={props.playerNum}\r\n              label={rows[rowId].label}\r\n              rowId={rows[rowId].id}\r\n              key={rows[rowId].id}\r\n            />\r\n          );\r\n        } else return null;\r\n      })}\r\n    </div>\r\n  );\r\n  \r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport gameContext from \"context/gameContext\";\r\nimport PlayerArea from \"components/layout/PlayerArea\";\r\nimport PlayerBoard from \"components/layout/PlayerBoard\";\r\n\r\nexport default function PlayerHalf(props) {\r\n  const { gameState } = useContext(gameContext);\r\n\r\n  // Power state for each player\r\n  let totalPower = gameState.rows[`player${props.playerNum}hand`].totalPower();\r\n\r\n  // Reverse order depending on which player (player 2 is on top of the screen, 1 on bottom)\r\n  if (props.playerNum === 1) {\r\n    return (\r\n      <div id={`player${props.playerNum}half`} className=\"playerhalf\">\r\n        <PlayerArea\r\n          playerNum={props.playerNum}\r\n          setCardFocus={props.setCardFocus}\r\n          totalPower={totalPower}\r\n          nextCardDraw={props.nextCardDraw}\r\n          setNextCardDraw={props.setNextCardDraw}\r\n          matchState={props.matchState}\r\n        />\r\n        <PlayerBoard\r\n          playerNum={props.playerNum}\r\n          setCardFocus={props.setCardFocus}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div id={`player${props.playerNum}half`} className=\"playerhalf\">\r\n        <PlayerBoard\r\n          playerNum={props.playerNum}\r\n          setCardFocus={props.setCardFocus}\r\n        />\r\n        <PlayerArea\r\n          playerNum={props.playerNum}\r\n          setCardFocus={props.setCardFocus}\r\n          totalPower={totalPower}\r\n          nextCardDraw={props.nextCardDraw}\r\n          setNextCardDraw={props.setNextCardDraw}\r\n          matchState={props.matchState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/owlogo-small.787f124f.webp\";","import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function AudioPlayer(props) {\r\n  const { playAudio, setPlayAudio } = props;\r\n\r\n  useEffect(() => {\r\n    const audio = document.getElementById(\"backgroundaudio\");\r\n    audio.volume = 0.3;\r\n    playAudio ? audio.play() : audio.pause();\r\n  }, [playAudio]);\r\n\r\n  return (\r\n    <div className=\"title-corners\">\r\n      {playAudio ? (\r\n        <i\r\n          onClick={() => {\r\n            setPlayAudio(!playAudio);\r\n          }}\r\n          className=\"fas fa-volume-up\"\r\n          id=\"audioicon\"\r\n          alt=\"audio icon\"\r\n        />\r\n      ) : (\r\n        <i\r\n          onClick={() => {\r\n            setPlayAudio(!playAudio);\r\n          }}\r\n          className=\"fas fa-volume-mute\"\r\n          id=\"audioicon\"\r\n          alt=\"audio icon\"\r\n        />\r\n      )}\r\n      <audio\r\n        src={require(`assets/audio/overwatch-theme.mp3`).default}\r\n        type=\"audio/mpeg\"\r\n        loop={true}\r\n        id=\"backgroundaudio\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import owlogo from \"assets/owlogo-small.webp\";\r\nimport AudioPlayer from \"./AudioPlayer\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function TitleCard(props) {\r\n  return (\r\n    <div id=\"title-container\">\r\n      <div className=\"title-corners\">\r\n        <i\r\n          onClick={() => $(\"#tutorial-container\").toggleClass(\"open\")}\r\n          className=\"fas fa-question\"\r\n        ></i>\r\n      </div>\r\n      <span className=\"title\">Overwatch</span>\r\n      <div className=\"credit\">\r\n        <span>Game & Card Design by</span>\r\n        <span>u/barberian912</span>\r\n      </div>\r\n      <img src={owlogo} id=\"centerlogo\" alt=\"owlogo\" />\r\n      <span className=\"credit\">\r\n        <span>Digitisation by</span>\r\n        <span>Nathan H Miles</span>\r\n      </span>\r\n      <span className=\"title\">Card Game</span>\r\n      <AudioPlayer\r\n        playAudio={props.playAudio}\r\n        setPlayAudio={props.setPlayAudio}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export default function Footer() {\r\n  return(\r\n    <footer>\r\n      <span className=\"disclaimer\">\r\n        All characters, art and the Overwatch logo and brand are the property of Blizzard Entertainment, Inc. This is a free, fan-made game that is not affiliated with Blizzard Entertainment, Inc. in any way.\r\n      </span>\r\n    </footer>\r\n  );\r\n}","import React, { useContext, useEffect, useRef } from \"react\";\r\nimport gameContext from \"context/gameContext\";\r\nimport turnContext from \"context/turnContext\";\r\nimport $ from \"jquery\";\r\nimport { ACTIONS } from \"App\";\r\nimport getRandInt from \"helper\";\r\n\r\nexport default function HeroAbilities(props) {\r\n  // Context\r\n  const { gameState, dispatch } = useContext(gameContext);\r\n  const { turnState } = useContext(turnContext);\r\n\r\n  // Variables\r\n  const playerTurn = turnState.playerTurn;\r\n  const enemyPlayerNum = playerTurn === 1 ? 2 : 1;\r\n\r\n  const { playerHeroId, unsetCardFocus, rowId, playAudio } = props;\r\n  const currentCard =\r\n    gameState.playerCards[`player${playerHeroId[0]}cards`].cards[playerHeroId];\r\n  const heroId = playerHeroId.slice(1, playerHeroId.length);\r\n\r\n  // ref to keep track of card health during async ability usages\r\n  let targetRef = useRef(null);\r\n  // ref to check if a user clicked end turn - checks current turnstate against refs state\r\n  let turnRef = useRef(turnState);\r\n  // ref to track how many enemies have been hit by a multi-target ability\r\n  let enemiesHitByAbility = useRef(0);\r\n  // ref to track which hero's ability is currently in use\r\n  let currentHeroAbilityRef = useRef(null);\r\n\r\n  // TODO: later if implementing more built in controls, such as only allowing\r\n  // TODO: user to affect cards in a specific row, create another ref to track\r\n  // TODO: row target info and reference it during the hero's ability call\r\n\r\n  // Ensures targetRef only contains values during ability usage,\r\n  // Reset to empty object when rerendering (i.e. when ability is finished)\r\n  useEffect(() => {\r\n    targetRef.current = {};\r\n  });\r\n\r\n  // Applies damage to either shields or health as needed, returning both the shield and health value\r\n  // TODO: currently only damage has its own function that sets state, all other state\r\n  // TODO: is set within the hero's ability\r\n  function applyDamage(\r\n    damageValue,\r\n    targetCardId,\r\n    targetRow,\r\n    ignoreShields = false\r\n  ) {\r\n    // Identify target player\r\n    const targetPlayerNum = parseInt(targetCardId[0]);\r\n    const targetPlayerCards =\r\n      gameState.playerCards[`player${targetPlayerNum}cards`].cards;\r\n    const targetHeroId = targetCardId.slice(1, targetCardId.length);\r\n\r\n    // Get hero health and shield values\r\n    let targetHealth = targetPlayerCards[targetCardId].health;\r\n    let targetShield = targetPlayerCards[targetCardId].shield;\r\n    let targetRowShield = gameState.rows[targetRow].totalShield();\r\n\r\n    // *** EFFECTS ***\r\n    // Check ally and enemy row effects that apply to damage\r\n    const targetRowAllyEffects = gameState.rows[targetRow].allyEffects.filter(\r\n      (effect) => effect.type === \"damage\"\r\n    );\r\n    const targetRowEnemyEffects = gameState.rows[targetRow].enemyEffects.filter(\r\n      (effect) => effect.type === \"damage\"\r\n    );\r\n\r\n    // Calculate net total of effects on the row\r\n    let totalRowEffect = 0;\r\n    for (let effect of targetRowAllyEffects) {\r\n      totalRowEffect += effect.value;\r\n    }\r\n    for (let effect of targetRowEnemyEffects) {\r\n      totalRowEffect += effect.value;\r\n    }\r\n\r\n    // Check ally and enemy card effects\r\n    const targetCardAllyEffects = targetPlayerCards[\r\n      targetCardId\r\n    ].allyEffects.filter((effect) => effect.type === \"damage\");\r\n    const targetCardEnemyEffects = targetPlayerCards[\r\n      targetCardId\r\n    ].enemyEffects.filter((effect) => effect.type === \"damage\");\r\n\r\n    // Calculate net total of card effects\r\n    let totalCardEffect = 0;\r\n    for (let effect of targetCardAllyEffects) {\r\n      totalCardEffect += effect.value;\r\n    }\r\n    for (let effect of targetCardEnemyEffects) {\r\n      totalCardEffect += effect.value;\r\n    }\r\n\r\n    // Net total of all damage effects on both row and card\r\n    const totalEffect = totalRowEffect + totalCardEffect;\r\n\r\n    // If the enemy hasn't been targeted during the current ability, apply the damage effect\r\n    if (!(targetCardId in targetRef.current)) {\r\n      damageValue += totalEffect;\r\n    }\r\n\r\n    // *** UPDATE REF ****\r\n    // If the target has already been targeted during this ability, update with current values\r\n    // Needed because gameState is only updated once the entire ability is finished, so\r\n    // we need useRef in order to keep track of the damaged hero's changing health/shield value\r\n    if (targetCardId in targetRef.current) {\r\n      targetHealth = targetRef.current[targetCardId].health;\r\n      targetShield = targetRef.current[targetCardId].shield;\r\n    } else targetRef.current[targetCardId] = {};\r\n\r\n    if (targetRow in targetRef.current) {\r\n      targetRowShield = targetRef.current[targetRow].totalShield;\r\n    } else targetRef.current[targetRow] = {};\r\n\r\n    // *** APPLY DAMAGE ***\r\n    // Track how much damage is done to the row's shields so it can be dispatched to state later\r\n    let rowShieldDamage = 0;\r\n    try {\r\n      // Decrement the target's health/shield/rowshield as needed\r\n      for (let i = 0; i < damageValue; i++) {\r\n        // Damage row shield before all else, and update ref\r\n        if (targetRowShield > 0 && ignoreShields === false) {\r\n          console.log(\r\n            `damaging row shield ${targetRowShield} with damage ${damageValue}`\r\n          );\r\n\r\n          targetRowShield -= 1;\r\n          rowShieldDamage += 1;\r\n\r\n          targetRef.current[targetRow][\"totalShield\"] = targetRowShield;\r\n\r\n          // Damage hero shield before health, and update ref\r\n        } else if (targetShield > 0 && ignoreShields === false) {\r\n          targetShield -= 1;\r\n\r\n          // Damage hero health and update ref\r\n        } else if (targetHealth > 0) {\r\n          targetHealth -= 1;\r\n        } else if (targetHealth === 0) {\r\n          console.log(\"target health is 0\");\r\n        } else {\r\n          throw new Error(`${targetCardId} is at ${targetHealth} health`);\r\n        }\r\n      }\r\n      targetRef.current[targetCardId][\"health\"] = targetHealth;\r\n      targetRef.current[targetCardId][\"shield\"] = targetShield;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    // Set the new state (will be done in batch at the end of the ability)\r\n    dispatch({\r\n      type: ACTIONS.DAMAGE_ROW_SHIELD,\r\n      payload: {\r\n        targetRow: targetRow,\r\n        rowShieldDamage: rowShieldDamage,\r\n      },\r\n    });\r\n\r\n    dispatch({\r\n      type: ACTIONS.EDIT_CARD,\r\n      payload: {\r\n        playerNum: targetPlayerNum,\r\n        targetCardId: targetCardId,\r\n        editKeys: [\"health\", \"shield\"],\r\n        editValues: [targetHealth, targetShield],\r\n      },\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  function applyHealing(healingValue, targetCardId) {\r\n    const targetPlayerNum = targetCardId[0];\r\n    const targetPlayerCards =\r\n      gameState.playerCards[`player${targetPlayerNum}cards`].cards;\r\n\r\n    // Get hero health\r\n    let targetHealth = targetPlayerCards[targetCardId].health;\r\n    const targetMaxHealth = targetPlayerCards[targetCardId].maxHealth;\r\n\r\n    if (targetCardId in targetRef.current) {\r\n      targetHealth = targetRef.current[targetCardId].health;\r\n    }\r\n\r\n    // Initialise ref if not been used yet during this ability\r\n    targetRef.current[targetCardId] = {};\r\n\r\n    // Track amount of healing done\r\n    let healingDone = 0;\r\n\r\n    // Increment health value\r\n    if (targetHealth !== 0) {\r\n      for (let i = 0; i < healingValue; i++) {\r\n        if (targetHealth < targetMaxHealth) {\r\n          targetHealth += 1;\r\n          healingDone += 1;\r\n          targetRef.current[targetCardId][\"health\"] = targetHealth;\r\n        }\r\n      }\r\n      // Set the new state (will be done in batch at the end of the ability)\r\n      dispatch({\r\n        type: ACTIONS.EDIT_CARD,\r\n        payload: {\r\n          playerNum: targetPlayerNum,\r\n          targetCardId: targetCardId,\r\n          editKeys: [\"health\"],\r\n          editValues: [targetHealth],\r\n        },\r\n      });\r\n    }\r\n\r\n    // Return remaining healing left over for possible later use\r\n    const remainingHealing = healingValue - healingDone;\r\n    return remainingHealing;\r\n  }\r\n\r\n  // Abilities data\r\n  const abilities = {\r\n    ana: {\r\n      ability1: {\r\n        audioFile: \"ana-grenade\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n              const rowPosition = targetRow[1];\r\n\r\n              // Remove the onclick\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (targetRow[0] === \"p\") {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              const enemyPlayer = playerTurn === 1 ? 2 : 1;\r\n              const playerRowCardIds =\r\n                gameState.rows[`${playerTurn}${rowPosition}`].cardIds;\r\n              const enemyPlayerRowCardIds =\r\n                gameState.rows[`${enemyPlayer}${rowPosition}`].cardIds;\r\n\r\n              const damageValue = 1;\r\n              const healValue = 1;\r\n\r\n              // Heal own player cards\r\n              for (let cardId of playerRowCardIds) {\r\n                applyHealing(healValue, cardId);\r\n              }\r\n\r\n              // Damage enemy cards\r\n              for (let cardId of enemyPlayerRowCardIds) {\r\n                applyDamage(\r\n                  damageValue,\r\n                  cardId,\r\n                  `${enemyPlayer}${rowPosition}`\r\n                );\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"ana-ult\",\r\n        run() {\r\n          const currentRowAllyNumber = gameState.rows[rowId].cardIds.length;\r\n          const effectId = \"anaUltimateEffect\";\r\n\r\n          // TODO: ensure ana's ultimate can be removed by hack/EMP\r\n        },\r\n      },\r\n      anaUltimateEffect: {},\r\n    },\r\n    ashe: {\r\n      ability1: {\r\n        audioFile: \"ashe-deadlockgang\",\r\n        run() {\r\n          // TODO: currently only the first option of ashe's ability 1 is implemented - need to find a way to let the player choose between the two options\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", async (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              const damageValue = 2;\r\n              applyDamage(damageValue, targetCardId, targetCardRow, true);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"ashe-bob\",\r\n        run() {\r\n          // Create bob card\r\n          dispatch({\r\n            type: ACTIONS.CREATE_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              heroId: \"bob\",\r\n            },\r\n          });\r\n\r\n          // Add summoned hero to hand\r\n          dispatch({\r\n            type: ACTIONS.ADD_CARD_TO_HAND,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              playerHeroId: `${playerTurn}bob`,\r\n            },\r\n          });\r\n        },\r\n      },\r\n    },\r\n    baptiste: {\r\n      ability1: {\r\n        audioFile: \"baptiste-notover\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick from all cards\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (targetCardRow[0] === \"p\") {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Get adjacent enemy target info\r\n              const adjacentTarget1 =\r\n                gameState.rows[targetCardRow].cardIds[targetCardIndex - 1];\r\n              const adjacentTarget2 =\r\n                gameState.rows[targetCardRow].cardIds[targetCardIndex + 1];\r\n\r\n              const targets = [targetCardId, adjacentTarget1, adjacentTarget2];\r\n\r\n              // If target is enemy apply damage, if ally apply healing\r\n              if (parseInt(targetCardId[0]) === playerTurn) {\r\n                targets.forEach((target) => {\r\n                  if (target !== undefined)\r\n                    applyHealing(1, target, targetCardRow);\r\n                });\r\n              } else {\r\n                targets.forEach((target) => {\r\n                  console.log(`attacking ${target}`);\r\n                  if (target !== undefined)\r\n                    applyDamage(1, target, targetCardRow);\r\n                });\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"baptiste-immortality\",\r\n      },\r\n    },\r\n    bastion: {\r\n      ability1: {},\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"bastion-ult\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Get adjacent enemy target info\r\n              const adjacentEnemy1 =\r\n                gameState.rows[targetCardRow].cardIds[targetCardIndex - 1];\r\n              const adjacentEnemy2 =\r\n                gameState.rows[targetCardRow].cardIds[targetCardIndex + 1];\r\n\r\n              // Apply 3 damage to target, and 1 damage to enemies adjacent to target\r\n              applyDamage(3, targetCardId, targetCardRow);\r\n              if (adjacentEnemy1 !== undefined) {\r\n                applyDamage(1, adjacentEnemy1, targetCardRow);\r\n              }\r\n              if (adjacentEnemy2 !== undefined) {\r\n                applyDamage(1, adjacentEnemy2, targetCardRow);\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    bob: {\r\n      ability1: {},\r\n      ability2: {\r\n        synergyCost: 1,\r\n      },\r\n    },\r\n    brigitte: {\r\n      ability1: {\r\n        audioFile: \"brigitte-armour\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply heal to the target card\r\n              const healValue = 3;\r\n              const remainingHealing = applyHealing(healValue, targetCardId);\r\n\r\n              // Apply remaining healing as shield\r\n              if (remainingHealing > 0) {\r\n                const shieldValue = remainingHealing;\r\n                dispatch({\r\n                  type: ACTIONS.UPDATE_CARD,\r\n                  payload: {\r\n                    playerNum: playerTurn,\r\n                    cardId: targetCardId,\r\n                    updateKeys: [\"shield\"],\r\n                    updateValues: [shieldValue],\r\n                  },\r\n                });\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"brigitte-ult\",\r\n      },\r\n    },\r\n    doomfist: {\r\n      ability1: {\r\n        audioFile: \"doomfist-punch\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              } else if (targetCardRow[1] !== \"b\") {\r\n                // Move target back a row if not already in last row\r\n                const newRowId = `${enemyPlayer}${\r\n                  targetCardRow[1] === \"f\" ? \"m\" : \"b\"\r\n                }`;\r\n\r\n                // Set state\r\n                dispatch({\r\n                  type: ACTIONS.MOVE_CARD,\r\n                  payload: {\r\n                    targetCardId: targetCardId,\r\n                    startRowId: targetCardRow,\r\n                    finishRowId: newRowId,\r\n                    startIndex: targetCardIndex,\r\n                    finishIndex: 0,\r\n                  },\r\n                });\r\n              }\r\n\r\n              // Apply damage to target\r\n              const damageValue = 2;\r\n              applyDamage(damageValue, targetCardId, targetCardRow);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        // TODO:\r\n        /*\r\n        Doomfist's ability2 is exactly the same as bastion's. To differntiate them, and add a little\r\n        more flavour to doomfist's card, ability2 could move doomfist to the opposite row that\r\n        he targeted (i.e. click on an enemy in the middle row, damage the target and adjacent enemies,\r\n        and also move doomfist to your middle row). This would be a double edge sword, as sometimes\r\n        you may not want to move doomfist into the row that you want to target.\r\n        The ability could also give doomfist a certain amount of shield for himself. \r\n        To balance this, the damage should probably be nerfed, probably 2 damage\r\n        to the target, and keep 1 to the adjacent enemies\r\n        */\r\n        synergyCost: 3,\r\n        audioFile: \"doomfist-ult\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Get adjacent enemy target info\r\n              const adjacentEnemy1 =\r\n                gameState.rows[targetCardRow].cardIds[targetCardIndex - 1];\r\n              const adjacentEnemy2 =\r\n                gameState.rows[targetCardRow].cardIds[targetCardIndex + 1];\r\n\r\n              // Apply 3 damage to target, and 1 damage to enemies adjacent to target\r\n              applyDamage(3, targetCardId, targetCardRow);\r\n              if (adjacentEnemy1 !== undefined) {\r\n                applyDamage(1, adjacentEnemy1, targetCardRow);\r\n              }\r\n              if (adjacentEnemy2 !== undefined) {\r\n                applyDamage(1, adjacentEnemy2, targetCardRow);\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    dva: {\r\n      ability2: {\r\n        synergyCost: 2,\r\n        audioFile: \"dva-ult\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            props.setNextCardDraw((prevState) => ({\r\n              ...prevState,\r\n              [`player${playerTurn}`]: \"dvameka\",\r\n            }));\r\n\r\n            resolve();\r\n          });\r\n        },\r\n      },\r\n    },\r\n    dvameka: {\r\n      ability1: {\r\n        audioFile: \"dvameka-apm\",\r\n        run() {\r\n          // Add shield to dvameka card\r\n          const newShield = 2;\r\n          dispatch({\r\n            type: ACTIONS.UPDATE_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              cardId: `${playerTurn}dvameka`,\r\n              updateKeys: [\"shield\"],\r\n              updateValues: [newShield],\r\n            },\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"dvameka-nerfthis\",\r\n        run() {\r\n          const rowPosition = rowId[1];\r\n          const enemyPlayer = playerTurn === 1 ? 2 : 1;\r\n          const playerRowCardIds = gameState.rows[rowId].cardIds;\r\n          const enemyPlayerRowCardIds =\r\n            gameState.rows[`${enemyPlayer}${rowPosition}`].cardIds;\r\n          const dvamekaIndex = $(`#${playerTurn}dvameka`).closest(\"li\").index();\r\n\r\n          const damageValue = 4;\r\n\r\n          // Damage own player cards, except for dvameka using the ability\r\n          for (let cardId of playerRowCardIds) {\r\n            if (cardId !== `${playerTurn}dvameka`) {\r\n              applyDamage(damageValue, cardId, rowId);\r\n            }\r\n          }\r\n\r\n          // Damage enemy cards\r\n          for (let cardId of enemyPlayerRowCardIds) {\r\n            applyDamage(damageValue, cardId, `${enemyPlayer}${rowPosition}`);\r\n          }\r\n\r\n          // After effects\r\n          // Discard dvameka card\r\n          dispatch({\r\n            type: ACTIONS.DISCARD_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              targetCardId: `${playerTurn}dvameka`,\r\n              targetCardRow: rowId,\r\n            },\r\n          });\r\n\r\n          // Create baby dva card\r\n          dispatch({\r\n            type: ACTIONS.CREATE_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              heroId: \"dva\",\r\n            },\r\n          });\r\n\r\n          // Add baby dva to row dvameka was in\r\n          dispatch({\r\n            type: ACTIONS.ADD_CARD_TO_HAND,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              playerHeroId: `${playerTurn}dva`,\r\n            },\r\n          });\r\n\r\n          // Get Dva's index in player hand\r\n          const dvaIndex = $(`#${playerTurn}dva`).closest(\"li\").index();\r\n\r\n          // Move dva from player hand to dvameka's former position\r\n          dispatch({\r\n            type: ACTIONS.MOVE_CARD,\r\n            payload: {\r\n              targetCardId: `${playerTurn}dva`,\r\n              startRowId: `player${playerTurn}hand`,\r\n              finishRowId: rowId,\r\n              startIndex: dvaIndex,\r\n              finishIndex: dvamekaIndex,\r\n            },\r\n          });\r\n        },\r\n      },\r\n    },\r\n    echo: {\r\n      ability1: {\r\n        audioFile: \"echo-burning\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is in valid row\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const targetPlayer = parseInt(targetCardId[0]);\r\n              const targetCard =\r\n                gameState.playerCards[`player${targetPlayer}cards`].cards[\r\n                  targetCardId\r\n                ];\r\n              const damageValue = targetCard.maxHealth - targetCard.health;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n\r\n              // Apply abilities that affect a specific card\r\n\r\n              resolve(\"resolved!\");\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"echo-ult\",\r\n        synergyCost: 2,\r\n        async run() {\r\n          // Get the id of the last used ultimate\r\n          const echoUltHeroId = localStorage.getItem(\"echoUltHeroId\");\r\n\r\n          // Certain ults need to be tailored specifically for echo to use\r\n          // Ashe - differntiate echo's bob from ashe's by using a different id\r\n          if (echoUltHeroId === \"ashe\") {\r\n            // Create bob card\r\n            dispatch({\r\n              type: ACTIONS.CREATE_CARD,\r\n              payload: {\r\n                playerNum: playerTurn,\r\n                heroId: \"bob-echo\",\r\n              },\r\n            });\r\n\r\n            // Add summoned hero to hand\r\n            dispatch({\r\n              type: ACTIONS.ADD_CARD_TO_HAND,\r\n              payload: {\r\n                playerNum: playerTurn,\r\n                playerHeroId: `${playerTurn}bob-echo`,\r\n              },\r\n            });\r\n\r\n            return;\r\n          }\r\n          // Dva - cant allow echo to create a second dvameka in player's deck\r\n          else if (echoUltHeroId === \"dva\") {\r\n            alert(\"Cannot duplicate D.va's Ultimate\");\r\n            return;\r\n          }\r\n          // DvaMeka - Echo causes the damage, but none of the other effects\r\n          else if (echoUltHeroId === \"dvameka\") {\r\n            const rowPosition = rowId[1];\r\n            const enemyPlayer = playerTurn === 1 ? 2 : 1;\r\n            const playerRowCardIds = gameState.rows[rowId].cardIds;\r\n            const enemyPlayerRowCardIds =\r\n              gameState.rows[`${enemyPlayer}${rowPosition}`].cardIds;\r\n\r\n            // Damage own player cards, except for echo using the ability\r\n            const damageValue = 4;\r\n            for (let cardId of playerRowCardIds) {\r\n              if (cardId !== `${playerTurn}echo`) {\r\n                applyDamage(damageValue, cardId, rowId);\r\n              }\r\n            }\r\n\r\n            // Damage enemy cards\r\n            for (let cardId of enemyPlayerRowCardIds) {\r\n              applyDamage(damageValue, cardId, `${enemyPlayer}${rowPosition}`);\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          // Run the ultimate in the same way as normal, but without deducting synergy\r\n          const maxTargets = abilities[echoUltHeroId].ability2.maxTargets;\r\n          let i = 0;\r\n          do {\r\n            await abilities[echoUltHeroId].ability2.run();\r\n            i++;\r\n          } while (\r\n            \"maxTargets\" in abilities[echoUltHeroId].ability2 &&\r\n            i < maxTargets\r\n          );\r\n        },\r\n      },\r\n    },\r\n    genji: {\r\n      ability1: {\r\n        maxTargets: 3,\r\n        audioFile: \"genji-cutting\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 1;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n\r\n              // Apply abilities that affect a specific card\r\n\r\n              resolve(\"resolved!\");\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"genji-ult\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            // Execute the following when any card is clicked\r\n            $(\".card\").on(\"click\", (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove the onclick effect from all cards\r\n              $(\".card\").off(\"click\");\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn ||\r\n                // Check target has been damaged\r\n                gameState.playerCards[`player${enemyPlayer}cards`].cards[\r\n                  targetCardId\r\n                ].health ===\r\n                  gameState.playerCards[`player${enemyPlayer}cards`].cards[\r\n                    targetCardId\r\n                  ].maxHealth\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply abilities that affect a specific card\r\n              dispatch({\r\n                type: ACTIONS.EDIT_CARD,\r\n                payload: {\r\n                  playerNum: enemyPlayer,\r\n                  targetCardId: targetCardId,\r\n                  editKeys: [\"health\"],\r\n                  editValues: [0],\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    hanzo: {\r\n      ability1: {\r\n        audioFile: \"hanzo-marked\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target information & remove onclick\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply effect\r\n              const effectId = \"hanzoEnemyEffect\";\r\n              dispatch({\r\n                type: ACTIONS.ADD_ROW_EFFECT,\r\n                payload: {\r\n                  targetRow: targetRow,\r\n                  playerHeroId: `${playerTurn}hanzo`,\r\n                  effectId: effectId,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"hanzo-ult\",\r\n        maxTargets: 3,\r\n        synergyCost: 3,\r\n        run() {\r\n          // Wait for user input\r\n          return new Promise((resolve, reject) => {\r\n            // Specifically, wait for user to click on a card\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              // TODO: check that target cards are actually in the same column\r\n              // TODO: currently just relying on user to choose correctly\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 3;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    junkrat: {\r\n      ability1: {\r\n        audioFile: \"junkrat-laugh\",\r\n      },\r\n      ability2: {\r\n        audioFile: \"junkrat-ult\",\r\n        synergyCost: 3,\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".row\").on(\"click\", (e) => {\r\n              const targetRowId = $(e.target).closest(\".row\").attr(\"id\");\r\n              const junkratStartIndex = $(`#${playerHeroId}`)\r\n                .closest(\"li\")\r\n                .index();\r\n              const newRowPosition = targetRowId[1];\r\n\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (targetRowId[0] === \"p\") {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Set state\r\n              dispatch({\r\n                type: ACTIONS.MOVE_CARD,\r\n                payload: {\r\n                  targetCardId: `${playerHeroId}`,\r\n                  startRowId: rowId,\r\n                  finishRowId: targetRowId,\r\n                  startIndex: junkratStartIndex,\r\n                  finishIndex: 0,\r\n                },\r\n              });\r\n\r\n              // Get all cards in the target row\r\n              const targetRowCardIds = $.map(\r\n                $(`#${enemyPlayerNum}${newRowPosition} .card`),\r\n                (card) => {\r\n                  return card.id;\r\n                }\r\n              );\r\n\r\n              // Apply damange\r\n              const damageValue = 2;\r\n              targetRowCardIds.forEach((cardId) => {\r\n                applyDamage(damageValue, cardId, targetRowId);\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    lucio: {\r\n      ability1: {\r\n        audioFile: \"lucio-ampitup\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove the onclick\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Effect id\r\n              const effectId = \"lucioAllyEffect\";\r\n              // Apply effect\r\n              dispatch({\r\n                type: ACTIONS.ADD_ROW_EFFECT,\r\n                payload: {\r\n                  targetRow: targetRow,\r\n                  playerHeroId: `${playerTurn}lucio`,\r\n                  effectId: effectId,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"lucio-ult\",\r\n        synergyCost: 3,\r\n        run() {\r\n          // Get target information\r\n          const heroRowCardIds = gameState.rows[rowId].cardIds;\r\n\r\n          // Remove the onclick\r\n          $(\".card\").off(\"click\");\r\n\r\n          // Apply effect\r\n          const shieldValue = 2;\r\n          for (let cardId of heroRowCardIds) {\r\n            dispatch({\r\n              type: ACTIONS.UPDATE_CARD,\r\n              payload: {\r\n                playerNum: playerTurn,\r\n                cardId: cardId,\r\n                updateKeys: [\"shield\"],\r\n                updateValues: [shieldValue],\r\n              },\r\n            });\r\n          }\r\n        },\r\n      },\r\n      lucioAllyEffect: {\r\n        run(rowId) {\r\n          const targetRowCardIds = gameState.rows[rowId].cardIds;\r\n          const healingValue = 1;\r\n\r\n          for (let cardId of targetRowCardIds) {\r\n            applyHealing(healingValue, cardId);\r\n          }\r\n\r\n          return;\r\n        },\r\n      },\r\n    },\r\n    mccree: {\r\n      ability1: {\r\n        audioFile: \"mccree-fishinabarrel\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            // When any card is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n              const enemyPlayer = parseInt(targetCardRow[0]);\r\n              const rowEnemies = gameState.rows[targetCardRow].cardIds.length;\r\n\r\n              // Remove onclick from all cards\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Reduce synergy of target row\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_SYNERGY,\r\n                payload: {\r\n                  rowId: targetCardRow,\r\n                  synergyCost: Math.abs(rowEnemies) * -1,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"mccree-ult\",\r\n        synergyCost: 3,\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".row\").on(\"click\", async (e) => {\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Get all cards in the target row\r\n              const targetRowCardIds = $.map(\r\n                $(`#${targetRow} .card`),\r\n                function (card) {\r\n                  return card.id;\r\n                }\r\n              );\r\n\r\n              // Apply damange\r\n              const totalDamage = 6;\r\n              const damagePerEnemy = Math.floor(\r\n                totalDamage / targetRowCardIds.length\r\n              );\r\n              let damageDone = 0;\r\n              targetRowCardIds.forEach((cardId) => {\r\n                applyDamage(damagePerEnemy, cardId, targetRow);\r\n                damageDone += damagePerEnemy;\r\n              });\r\n\r\n              if (damageDone < totalDamage) {\r\n                let remainingDamage = totalDamage - damageDone;\r\n\r\n                alert(\r\n                  `${remainingDamage} left over. Choose who should receive it! (1 damage per click)`\r\n                );\r\n\r\n                // Define the function that will apply remaining damage\r\n                const applyRemainingDamage = () => {\r\n                  return new Promise((resolve, reject) => {\r\n                    $(\".card\").on(\"click\", (e) => {\r\n                      const targetCard = $(e.target)\r\n                        .closest(\".card\")\r\n                        .attr(\"id\");\r\n                      const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n                      $(\".card\").off(\"click\");\r\n\r\n                      // Check target is valid\r\n                      if (\r\n                        targetRow[0] === \"p\" ||\r\n                        parseInt(targetRow[0]) === playerTurn\r\n                      ) {\r\n                        reject(\"Incorrect target row\");\r\n                        return;\r\n                      }\r\n\r\n                      applyDamage(1, targetCard, targetRow);\r\n                      resolve();\r\n                    });\r\n                  });\r\n                };\r\n\r\n                do {\r\n                  await applyRemainingDamage();\r\n                  remainingDamage--;\r\n                } while (remainingDamage > 0);\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    mei: {\r\n      ability1: {\r\n        audioFile: \"mei-goticed\",\r\n      },\r\n      ability2: {\r\n        audioFile: \"mei-ult\",\r\n        synergyCost: 2,\r\n      },\r\n    },\r\n    mercy: {\r\n      ability1: {\r\n        audioFile: \"mercy-medicalemergency\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target information & remove onclick\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              console.log(targetRow);\r\n\r\n              // Remove click event from all cards\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply effect\r\n              // TODO: find way to decide between the two mercy ally effects - currently only healing effect is implemented\r\n              let effectId = \"mercyAllyEffect1\";\r\n\r\n              // Harmony orb applies healing immediately, as well as over time\r\n              if (effectId === \"mercyAllyEffect1\") {\r\n                const healingValue = 2;\r\n                applyHealing(healingValue, targetCardId);\r\n              }\r\n\r\n              // Set state\r\n              dispatch({\r\n                type: ACTIONS.ADD_CARD_EFFECT,\r\n                payload: {\r\n                  targetCardId: targetCardId,\r\n                  playerHeroId: `${playerTurn}mercy`,\r\n                  effectId: effectId,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"mercy-ult\",\r\n        synergyCost: 3,\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRowId = $(e.target).closest(\".row\").attr(\"id\");\r\n              const mercyStartIndex = $(`#${playerHeroId}`)\r\n                .closest(\"li\")\r\n                .index();\r\n              const targetCardIndex = $(`#${targetCardId}`)\r\n                .closest(\"li\")\r\n                .index();\r\n              const newRowPosition = targetRowId[1];\r\n\r\n              // Remove the onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRowId[0] === \"p\" ||\r\n                parseInt(targetRowId[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Set state\r\n              dispatch({\r\n                type: ACTIONS.MOVE_CARD,\r\n                payload: {\r\n                  targetCardId: `${playerHeroId}`,\r\n                  startRowId: rowId,\r\n                  finishRowId: targetRowId,\r\n                  startIndex: mercyStartIndex,\r\n                  finishIndex: targetCardIndex + 1,\r\n                },\r\n              });\r\n\r\n              if (\r\n                gameState.playerCards[`player${playerTurn}cards`].cards[\r\n                  targetCardId\r\n                ].health === 0\r\n              ) {\r\n                dispatch({\r\n                  type: ACTIONS.EDIT_CARD,\r\n                  payload: {\r\n                    playerNum: playerTurn,\r\n                    targetCardId: targetCardId,\r\n                    editKeys: [\"health\"],\r\n                    editValues: [\r\n                      gameState.playerCards[`player${playerTurn}cards`].cards[\r\n                        targetCardId\r\n                      ].maxHealth,\r\n                    ],\r\n                  },\r\n                });\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      mercyAllyEffect1: {\r\n        run(cardId) {\r\n          const healingValue = 1;\r\n          applyHealing(healingValue, cardId);\r\n          return;\r\n        },\r\n      },\r\n    },\r\n    moira: {\r\n      ability1: {\r\n        audioFile: \"moira-grasp\",\r\n        run() {\r\n          // Carry out first stage of ability1 - i.e. damage or heal\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", async (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (targetCardRow[0] === \"p\") {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              let targetedPlayer;\r\n              // If targeting an ally apply heal, else apply damage\r\n              if (parseInt(targetCardRow[0]) === playerTurn) {\r\n                applyHealing(2, targetCardId);\r\n                targetedPlayer = \"ally\";\r\n              } else {\r\n                const damageValue = 2;\r\n                applyDamage(damageValue, targetCardId, targetCardRow, true);\r\n                targetedPlayer = \"enemy\";\r\n              }\r\n\r\n              // Carry out the second stage - i.e. damage or healing, whichever wasnt already done\r\n              function moiraAbility1Stage2() {\r\n                return new Promise((resolve, reject) => {\r\n                  $(\".card\").on(\"click\", (e) => {\r\n                    const targetCardId = $(e.target)\r\n                      .closest(\".card\")\r\n                      .attr(\"id\");\r\n                    const targetCardRow = $(e.target)\r\n                      .closest(\".row\")\r\n                      .attr(\"id\");\r\n\r\n                    $(\".card\").off(\"click\");\r\n\r\n                    // Check target is valid\r\n                    if (targetCardRow[0] === \"p\") {\r\n                      reject(\"Incorrect target row\");\r\n                      return;\r\n                    }\r\n\r\n                    if (targetedPlayer === \"ally\") {\r\n                      const damageValue = 2;\r\n                      applyDamage(\r\n                        damageValue,\r\n                        targetCardId,\r\n                        targetCardRow,\r\n                        true\r\n                      );\r\n                    } else {\r\n                      applyHealing(2, targetCardId);\r\n                    }\r\n\r\n                    resolve();\r\n                  });\r\n                });\r\n              }\r\n              await moiraAbility1Stage2();\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        maxTargets: 6,\r\n        audioFile: \"moira-ult\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", async (e) => {\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              if (targetCardRow[0] === \"p\") {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // If targeting an ally apply heal, else apply damage\r\n              if (parseInt(targetCardRow[0]) === playerTurn) {\r\n                applyHealing(2, targetCardId);\r\n              } else {\r\n                applyDamage(2, targetCardId, targetCardRow, true);\r\n              }\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    orisa: {\r\n      ability1: {\r\n        audioFile: \"orisa-barrier\",\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"orisa-ult\",\r\n      },\r\n    },\r\n    pharah: {\r\n      ability1: {\r\n        audioFile: \"pharah-clear\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            // When any card is clicked\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick from all cards\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n\r\n                // Move target back a row if not already in last row\r\n              } else if (targetCardRow[1] !== \"b\") {\r\n                const newRowId = `${enemyPlayer}${\r\n                  targetCardRow[1] === \"f\" ? \"m\" : \"b\"\r\n                }`;\r\n\r\n                dispatch({\r\n                  type: ACTIONS.MOVE_CARD,\r\n                  payload: {\r\n                    targetCardId: targetCardId,\r\n                    startRowId: targetCardRow,\r\n                    finishRowId: newRowId,\r\n                    startIndex: targetCardIndex,\r\n                    finishIndex: 0,\r\n                  },\r\n                });\r\n              }\r\n\r\n              // Reduce synergy of target row\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_SYNERGY,\r\n                payload: {\r\n                  rowId: targetCardRow,\r\n                  synergyCost: -2,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        maxTargets: 3,\r\n        synergyCost: 3,\r\n        audioFile: \"pharah-ult\",\r\n        run() {\r\n          // Wait for user input\r\n          return new Promise((resolve, reject) => {\r\n            // Specifically, wait for user to click on a card\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetPlayerNum = parseInt(targetCardId[0]);\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 2;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    reaper: {\r\n      ability1: {\r\n        audioFile: \"reaper-lastwords\",\r\n        maxTargets: 2,\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 1;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"reaper-ult\",\r\n        run() {\r\n          // Get target info\r\n          const rowPosition = rowId[1];\r\n          const enemyPlayer = playerTurn === 1 ? 2 : 1;\r\n          const enemyPlayerRowCardIds =\r\n            gameState.rows[`${enemyPlayer}${rowPosition}`].cardIds;\r\n\r\n          // Damage enemy cards\r\n          const damageValue = 3;\r\n          for (let cardId of enemyPlayerRowCardIds) {\r\n            applyDamage(damageValue, cardId, `${enemyPlayer}${rowPosition}`);\r\n          }\r\n\r\n          // After effects\r\n          // Discard card\r\n          dispatch({\r\n            type: ACTIONS.DISCARD_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              targetCardId: `${playerTurn}reaper`,\r\n              targetCardRow: rowId,\r\n            },\r\n          });\r\n        },\r\n      },\r\n    },\r\n    reinhardt: {\r\n      ability1: {\r\n        audioFile: \"reinhardt-barrier\",\r\n        run() {\r\n          // Apply shield to row\r\n          const shieldValue = 3;\r\n          dispatch({\r\n            type: ACTIONS.ADD_ROW_SHIELD,\r\n            payload: {\r\n              playerHeroId: playerHeroId,\r\n              targetRow: rowId,\r\n              rowShield: shieldValue,\r\n            },\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"reinhardt-ult\",\r\n        maxTargets: 3,\r\n        run() {\r\n          // Wait for user input\r\n          return new Promise((resolve, reject) => {\r\n            // Specifically, wait for user to click on a card\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              // TODO: check that target cards are actually in the same column\r\n              // TODO: currently just relying on user to choose correctly\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 2;\r\n              applyDamage(damageValue, targetCardId, targetCardRow);\r\n\r\n              // Reduce synergy of target row\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_SYNERGY,\r\n                payload: {\r\n                  rowId: targetCardRow,\r\n                  synergyCost: -1,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    roadhog: {\r\n      ability1: {\r\n        audioFile: \"roadhog-hook\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetCardIndex = $(e.target).closest(\"li\").index();\r\n              const targetCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n\r\n              // Remove onclick from all cards\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetCardRow[0] === \"p\" ||\r\n                parseInt(targetCardRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Move target to front row\r\n              const newRowId = `${enemyPlayer}f`;\r\n              dispatch({\r\n                type: ACTIONS.MOVE_CARD,\r\n                payload: {\r\n                  targetCardId: targetCardId,\r\n                  startRowId: targetCardRow,\r\n                  finishRowId: newRowId,\r\n                  startIndex: targetCardIndex,\r\n                  finishIndex: 0,\r\n                },\r\n              });\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 2;\r\n              applyDamage(damageValue, targetCardId, targetCardRow);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"roadhog-hogwild\",\r\n        synergyCost: 3,\r\n        async run() {\r\n          // TODO\r\n          // Get target info\r\n          const enemyPlayer = playerTurn === 1 ? 2 : 1;\r\n\r\n          // Copy arrays of cards from state, assign id to the row for later reference\r\n          // We will manipulate the array, so we dont want a reference to the original array\r\n          const enemyBackRowCards = Array.from(\r\n            gameState.rows[`${enemyPlayer}b`].cardIds\r\n          );\r\n          enemyBackRowCards[\"id\"] = `${enemyPlayer}b`;\r\n          const enemyMiddleRowCards = Array.from(\r\n            gameState.rows[`${enemyPlayer}m`].cardIds\r\n          );\r\n          enemyMiddleRowCards[\"id\"] = `${enemyPlayer}m`;\r\n          const enemyFrontRowCards = Array.from(\r\n            gameState.rows[`${enemyPlayer}f`].cardIds\r\n          );\r\n          enemyFrontRowCards[\"id\"] = `${enemyPlayer}f`;\r\n\r\n          const enemyRows = [\r\n            enemyBackRowCards,\r\n            enemyMiddleRowCards,\r\n            enemyFrontRowCards,\r\n          ];\r\n\r\n          // Filter out heros at 0 health\r\n          for (let row of enemyRows) {\r\n            row.filter((cardId) => {\r\n              if (\r\n                gameState.playerCards[`player${enemyPlayer}cards`].cards[cardId]\r\n                  .health > 0\r\n              ) {\r\n                return cardId;\r\n              }\r\n              return null;\r\n            });\r\n          }\r\n\r\n          // Get total damage amount (2d6 = between 2 - 12)\r\n          const totalDamage = getRandInt(2, 13);\r\n          alert(`Wholehog rolled ${totalDamage} damage!`);\r\n\r\n          // Calculate damage per hero and apply\r\n          const totalEnemyCards =\r\n            enemyBackRowCards.length +\r\n            enemyMiddleRowCards.length +\r\n            enemyFrontRowCards.length;\r\n          const damageValue = Math.floor(totalDamage / totalEnemyCards);\r\n          let damageDone = 0;\r\n          if (damageValue > 0) {\r\n            for (let row of enemyRows) {\r\n              for (let cardId of row) {\r\n                applyDamage(damageValue, cardId, row.id);\r\n                damageDone += damageValue;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Calculate damage that cant be evenly spread among all enemy heroes\r\n          let remainingDamage = totalDamage - damageDone;\r\n\r\n          // Allow user to spread remaining damage\r\n          if (remainingDamage > 0) {\r\n            alert(\r\n              `${remainingDamage} left over. Choose who should receive it! (1 damage per click)`\r\n            );\r\n\r\n            // Define the function that will apply remaining damage\r\n            const applyRemainingDamage = () => {\r\n              return new Promise((resolve, reject) => {\r\n                $(\".card\").on(\"click\", (e) => {\r\n                  const targetCard = $(e.target).closest(\".card\").attr(\"id\");\r\n                  const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n                  $(\".card\").off(\"click\");\r\n\r\n                  // Check target is valid\r\n                  if (\r\n                    targetRow[0] === \"p\" ||\r\n                    parseInt(targetRow[0]) === playerTurn\r\n                  ) {\r\n                    reject(\"Incorrect target row\");\r\n                    return;\r\n                  }\r\n\r\n                  applyDamage(1, targetCard, targetRow);\r\n                  resolve();\r\n                });\r\n              });\r\n            };\r\n\r\n            do {\r\n              await applyRemainingDamage();\r\n              remainingDamage--;\r\n            } while (remainingDamage > 0);\r\n          }\r\n        },\r\n      },\r\n    },\r\n    sigma: {\r\n      ability1: {\r\n        audioFile: \"sigma-barrier\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove the onclick\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply effect\r\n              const shieldValue = 3;\r\n              dispatch({\r\n                type: ACTIONS.ADD_ROW_SHIELD,\r\n                payload: {\r\n                  playerHeroId: playerHeroId,\r\n                  targetRow: targetRow,\r\n                  rowShield: shieldValue,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"sigma-ult\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".row\").on(\"click\", (e) => {\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Reduce synergy of target row to 0\r\n              dispatch({\r\n                type: ACTIONS.SET_SYNERGY,\r\n                payload: {\r\n                  rowId: targetRow,\r\n                  newSynergyVal: 0,\r\n                },\r\n              });\r\n\r\n              // Get all cards in the target row\r\n              const targetRowCardIds = $.map(\r\n                $(`#${targetRow} .card`),\r\n                function (card) {\r\n                  return card.id;\r\n                }\r\n              );\r\n\r\n              // Apply damange\r\n              const damageValue = 1;\r\n              targetRowCardIds.forEach((cardId) => {\r\n                applyDamage(damageValue, cardId, targetRow);\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    soldier: {\r\n      id: \"soldier\",\r\n      ability1: {\r\n        audioFile: \"soldier-teamheal\",\r\n        run() {\r\n          // Get target info\r\n          const playerRowCardIds = gameState.rows[rowId].cardIds;\r\n\r\n          // Damage enemy cards\r\n          const healValue = 1;\r\n          for (let cardId of playerRowCardIds) {\r\n            applyHealing(healValue, cardId);\r\n          }\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"soldier-ult\",\r\n        maxTargets: 3,\r\n        synergyCost: 3,\r\n        run() {\r\n          // Wait for user input\r\n          return new Promise((resolve, reject) => {\r\n            // Specifically, wait for user to click on a card\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n                // Check target is valid\r\n              } else if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card\r\n              // Decrease damage with each successive hit by using a ref\r\n              const damageValue = 3 - enemiesHitByAbility.current;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n              enemiesHitByAbility.current += 1;\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    sombra: {\r\n      ability1: {\r\n        audioFile: \"sombra-hack\",\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"sombra-ult\",\r\n      },\r\n    },\r\n    symmetra: {\r\n      ability1: {\r\n        audioFile: \"symmetra-teleporter\",\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const teleportCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const teleportCardIndex = $(e.target).closest(\"li\").index();\r\n              const teleportCardRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick from all cards\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                teleportCardRow[0] === \"p\" ||\r\n                parseInt(teleportCardRow[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Check if target effect is applied to any row, if so remove effect\r\n              for (let key in gameState.rows) {\r\n                if (key[0] !== \"p\") {\r\n                  const targetPlayer = parseInt(key[0]);\r\n\r\n                  console.log(`key is ${key}`);\r\n                  console.log(JSON.stringify(gameState.rows[key]));\r\n\r\n                  for (let effect of gameState.rows[key].allyEffects) {\r\n                    if (effect.playerHeroId === teleportCardId) {\r\n                      const newRow = gameState.rows[key].allyEffects.filter(\r\n                        (effect) => effect.playerHeroId !== teleportCardId\r\n                      );\r\n                      dispatch({\r\n                        type: ACTIONS.EDIT_ROW,\r\n                        payload: {\r\n                          targetRow: key,\r\n                          editKeys: [\"allyEffects\"],\r\n                          editValues: [newRow],\r\n                        },\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  for (let effect of gameState.rows[key].enemyEffects) {\r\n                    if (effect.playerHeroId === teleportCardId) {\r\n                      const newRow = gameState.rows[key].enemyEffects.filter(\r\n                        (effect) => effect.playerHeroId !== teleportCardId\r\n                      );\r\n                      dispatch({\r\n                        type: ACTIONS.EDIT_ROW,\r\n                        payload: {\r\n                          targetRow: key,\r\n                          editKeys: [\"enemyEffects\"],\r\n                          editValues: [newRow],\r\n                        },\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  // Check if target's effect is applied to any card, if so remove\r\n                  for (let cardId of gameState.rows[key].cardIds) {\r\n                    for (let effect of gameState.playerCards[\r\n                      `player${targetPlayer}cards`\r\n                    ].cards[cardId].allyEffects) {\r\n                      if (effect.playerHeroId === teleportCardId) {\r\n                        const newEffects = gameState.playerCards[\r\n                          `player${targetPlayer}cards`\r\n                        ].cards[cardId].allyEffects.filter(\r\n                          (effect) => effect.playerHeroId !== teleportCardId\r\n                        );\r\n                        dispatch({\r\n                          type: ACTIONS.EDIT_CARD,\r\n                          payload: {\r\n                            playerNum: targetPlayer,\r\n                            targetCardId: cardId,\r\n                            editKeys: [\"allyEffects\"],\r\n                            editValues: [newEffects],\r\n                          },\r\n                        });\r\n                      }\r\n                    }\r\n\r\n                    for (let effect of gameState.playerCards[\r\n                      `player${targetPlayer}cards`\r\n                    ].cards[cardId].enemyEffects) {\r\n                      if (effect.playerHeroId === teleportCardId) {\r\n                        const newEffects = gameState.playerCards[\r\n                          `player${targetPlayer}cards`\r\n                        ].cards[cardId].enemyEffects.filter(\r\n                          (effect) => effect.playerHeroId !== teleportCardId\r\n                        );\r\n                        dispatch({\r\n                          type: ACTIONS.EDIT_CARD,\r\n                          payload: {\r\n                            playerNum: targetPlayer,\r\n                            targetCardId: cardId,\r\n                            editKeys: [\"enemyEffects\"],\r\n                            editValues: [newEffects],\r\n                          },\r\n                        });\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Move target to playerhand\r\n              const newRowId = `player${playerTurn}hand`;\r\n              dispatch({\r\n                type: ACTIONS.MOVE_CARD,\r\n                payload: {\r\n                  targetCardId: teleportCardId,\r\n                  startRowId: teleportCardRow,\r\n                  finishRowId: newRowId,\r\n                  startIndex: teleportCardIndex,\r\n                  finishIndex: 0,\r\n                },\r\n              });\r\n\r\n              // Set card to not played\r\n              /* \r\n              Do not reset the card's synergy, despite what it says on the card\r\n              Symmetra's teleporter ability as written on the card is very simple\r\n              Keeping the teleported card's synergy in the row, and not resetting the card's synergy,\r\n              adds a bit more complexity and strategy to how this ability is used\r\n              */\r\n              dispatch({\r\n                type: ACTIONS.EDIT_CARD,\r\n                payload: {\r\n                  playerNum: playerTurn,\r\n                  targetCardId: teleportCardId,\r\n                  editKeys: [\r\n                    \"isPlayed\",\r\n                    \"allyEffects\",\r\n                    \"enemyEffects\",\r\n                    \"shield\",\r\n                  ],\r\n                  editValues: [false, [], [], 0],\r\n                },\r\n              });\r\n\r\n              // Reduce number of cards played by player\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_ROW,\r\n                payload: {\r\n                  targetRow: `player${playerTurn}hand`,\r\n                  updateKeys: [\"cardsPlayed\"],\r\n                  updateValues: [-1],\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"symmetra-shield\",\r\n        synergyCost: 3,\r\n        run() {\r\n          const playerBackRowCardIds = gameState.rows[`${playerTurn}b`].cardIds;\r\n          const playerMiddleRowCardIds =\r\n            gameState.rows[`${playerTurn}m`].cardIds;\r\n          const playerFrontRowCardIds =\r\n            gameState.rows[`${playerTurn}f`].cardIds;\r\n\r\n          const playerCards = [\r\n            playerBackRowCardIds,\r\n            playerMiddleRowCardIds,\r\n            playerFrontRowCardIds,\r\n          ];\r\n\r\n          // Add shield to all ally cards\r\n          for (let row of playerCards) {\r\n            for (let cardId of row) {\r\n              const newShield = 1;\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_CARD,\r\n                payload: {\r\n                  playerNum: playerTurn,\r\n                  cardId: cardId,\r\n                  updateKeys: [\"shield\"],\r\n                  updateValues: [newShield],\r\n                },\r\n              });\r\n            }\r\n          }\r\n        },\r\n      },\r\n    },\r\n    torbjorn: {\r\n      ability1: {\r\n        audioFile: \"torbjorn-turret\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target information & remove onclick\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply effect\r\n              const effectId = \"torbjornEnemyEffect\";\r\n              const heroId = \"torbjorn\";\r\n              dispatch({\r\n                type: ACTIONS.ADD_ROW_EFFECT,\r\n                payload: {\r\n                  targetRow: targetRow,\r\n                  playerHeroId: `${playerTurn}${heroId}`,\r\n                  effectId: effectId,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"torbjorn-ult\",\r\n        synergyCost: 3,\r\n        run() {\r\n          const newTurretDamage = 2;\r\n          const playerHeroId = `${playerTurn}torbjorn`;\r\n\r\n          dispatch({\r\n            type: ACTIONS.EDIT_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              targetCardId: playerHeroId,\r\n              editKeys: [\"effects.torbjornEnemyEffect.value\"],\r\n              editValues: [newTurretDamage],\r\n            },\r\n          });\r\n        },\r\n      },\r\n      torbjornEnemyEffect: {\r\n        run(rowId) {\r\n          // Get enemies in target row\r\n          const targetPlayer = parseInt(rowId[0]);\r\n          const torbPlayer = targetPlayer === 1 ? 2 : 1;\r\n          const rowEnemies = gameState.rows[rowId].cardIds.filter((cardId) => {\r\n            if (\r\n              gameState.playerCards[`player${targetPlayer}cards`].cards[cardId]\r\n                .health > 0\r\n            ) {\r\n              return cardId;\r\n            } else return null;\r\n          });\r\n\r\n          const turretDamage =\r\n            gameState.playerCards[`player${torbPlayer}cards`].cards[\r\n              `${torbPlayer}torbjorn`\r\n            ].effects.torbjornEnemyEffect.value;\r\n          const maxTargets = 2;\r\n\r\n          // If there are no enemies in the target row, do nothing\r\n          if (rowEnemies.length === 0) {\r\n            return;\r\n\r\n            // If there is just one enemy, attach that enemy once\r\n          } else if (rowEnemies.length === 1) {\r\n            applyDamage(turretDamage, rowEnemies[0], rowId);\r\n\r\n            // If there are several enemies, attack two at random\r\n          } else if (rowEnemies.length >= 2) {\r\n            const attackedEnemies = [];\r\n\r\n            for (let i = 0; i < maxTargets; i++) {\r\n              let target;\r\n              do {\r\n                target = getRandInt(0, rowEnemies.length);\r\n              } while (attackedEnemies.includes(target));\r\n              console.log(`target is ${target}`);\r\n              applyDamage(turretDamage, rowEnemies[target], rowId);\r\n              attackedEnemies.push(target);\r\n            }\r\n          }\r\n        },\r\n      },\r\n    },\r\n    tracer: {\r\n      ability1: {\r\n        audioFile: \"tracer-smarts\",\r\n        maxTargets: 2,\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target info\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Allow user to end the ability early by clicking on the ability-using-hero's card\r\n              if (targetCardId === `${currentHeroAbilityRef.current}`) {\r\n                alert(\"Ability stopped early\");\r\n                return;\r\n              }\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply damage to the target card (includes setting state)\r\n              const damageValue = 1;\r\n              applyDamage(damageValue, targetCardId, targetRow);\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"tracer-imback\",\r\n        synergyCost: 2,\r\n        run() {\r\n          const targetCardId = playerHeroId;\r\n          const targetCardIndex = $(`#${targetCardId}`).closest(\"li\").index();\r\n\r\n          // Remove all counters from tracer\r\n          dispatch({\r\n            type: ACTIONS.EDIT_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              targetCardId: targetCardId,\r\n              editKeys: [\"allyEffects\", \"enemyEffects\", \"shield\", \"isPlayed\"],\r\n              editValues: [[], [], 0, false],\r\n            },\r\n          });\r\n\r\n          // Return tracer to player hand\r\n          dispatch({\r\n            type: ACTIONS.MOVE_CARD,\r\n            payload: {\r\n              targetCardId: targetCardId,\r\n              startRowId: rowId,\r\n              startIndex: targetCardIndex,\r\n              finishRowId: `player${playerTurn}hand`,\r\n              finishIndex: 0,\r\n            },\r\n          });\r\n\r\n          // Reduce number of cards played by player\r\n          dispatch({\r\n            type: ACTIONS.UPDATE_ROW,\r\n            payload: {\r\n              targetRow: `player${playerTurn}hand`,\r\n              updateKeys: [\"cardsPlayed\"],\r\n              updateValues: [-1],\r\n            },\r\n          });\r\n        },\r\n      },\r\n    },\r\n    widowmaker: {\r\n      ability1: {\r\n        audioFile: \"widowmaker-noonecanhide-fr\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".row\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove the onclick\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Effect id\r\n              const effectId = \"widowmakerEnemyEffect\";\r\n              // Apply effect\r\n              dispatch({\r\n                type: ACTIONS.ADD_ROW_EFFECT,\r\n                payload: {\r\n                  targetRow: targetRow,\r\n                  playerHeroId: `${playerTurn}widowmaker`,\r\n                  effectId: effectId,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"widowmaker-oneshot\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When card is chosen as target by being clicked on\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              const enemyPlayer = parseInt(targetCardId[0]);\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove onclick event\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check valid target\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) === playerTurn\r\n              ) {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Apply abilities that affect a specific card\r\n              dispatch({\r\n                type: ACTIONS.EDIT_CARD,\r\n                payload: {\r\n                  playerNum: enemyPlayer,\r\n                  targetCardId: targetCardId,\r\n                  editKeys: [\"health\"],\r\n                  editValues: [0],\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    winston: {\r\n      ability1: {\r\n        audioFile: \"winston-barrier\",\r\n        run() {\r\n          // Apply shield to row\r\n          const shieldValue = 3;\r\n          dispatch({\r\n            type: ACTIONS.ADD_ROW_SHIELD,\r\n            payload: {\r\n              playerHeroId: playerHeroId,\r\n              targetRow: rowId,\r\n              rowShield: shieldValue,\r\n            },\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        /*\r\n        Winston's ult is the same as junkrat - to differentiate and\r\n        add more flavor, winston could jump twice instead of once, \r\n        doing 1 damage each time. Perhaps prevent jumping in the same row\r\n        so Winston cant do two damage to one row?\r\n        */\r\n        audioFile: \"winston-angry\",\r\n        synergyCost: 3,\r\n        run() {\r\n          return new Promise((resolve, reject) => {\r\n            $(\".row\").on(\"click\", (e) => {\r\n              const targetRowId = $(e.target).closest(\".row\").attr(\"id\");\r\n              const winstonStartIndex = $(`#${playerHeroId}`)\r\n                .closest(\"li\")\r\n                .index();\r\n              const newRowPosition = targetRowId[1];\r\n\r\n              $(\".row\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (targetRowId[0] === \"p\") {\r\n                reject(\"Incorrect target row\");\r\n                return;\r\n              }\r\n\r\n              // Set state\r\n              dispatch({\r\n                type: ACTIONS.MOVE_CARD,\r\n                payload: {\r\n                  targetCardId: `${playerHeroId}`,\r\n                  startRowId: rowId,\r\n                  finishRowId: targetRowId,\r\n                  startIndex: winstonStartIndex,\r\n                  finishIndex: 0,\r\n                },\r\n              });\r\n\r\n              // Get all cards in the target row\r\n              const targetRowCardIds = $.map(\r\n                $(`#${enemyPlayerNum}${newRowPosition} .card`),\r\n                (card) => {\r\n                  return card.id;\r\n                }\r\n              );\r\n\r\n              // Apply damange\r\n              const damageValue = 2;\r\n              targetRowCardIds.forEach((cardId) => {\r\n                applyDamage(damageValue, cardId, targetRowId);\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    wreckingball: {\r\n      ability1: {\r\n        audioFile: \"wreckingball-shields\",\r\n        run() {\r\n          // Get number of enemies in opposite row\r\n          const oppositeRowEnemies =\r\n            gameState.rows[`${enemyPlayerNum}${rowId[1]}`].cardIds;\r\n          const newShield = 1 + oppositeRowEnemies.length;\r\n          dispatch({\r\n            type: ACTIONS.UPDATE_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              cardId: `${playerTurn}wreckingball`,\r\n              updateKeys: [\"shield\"],\r\n              updateValues: [newShield],\r\n            },\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"wreckingball-ult\",\r\n      },\r\n    },\r\n    zarya: {\r\n      ability1: {\r\n        audioFile: \"zarya-barrier\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target information\r\n              const targetCard = $(e.target).closest(\".card\").attr(\"id\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n\r\n              // Remove the onclick\r\n              $(\".card\").off(\"click\");\r\n\r\n              // Check target is valid\r\n              if (\r\n                targetRow[0] === \"p\" ||\r\n                parseInt(targetRow[0]) !== playerTurn\r\n              ) {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply effect\r\n              const shieldValue = 3;\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_CARD,\r\n                payload: {\r\n                  playerNum: playerTurn,\r\n                  cardId: targetCard,\r\n                  updateKeys: [\"shield\"],\r\n                  updateValues: [shieldValue],\r\n                },\r\n              });\r\n\r\n              // Keep track of how much shield remaining for Zarya's ultimate\r\n              // TODO: zarya tracks how much shield is given, but currently doesnt know when her shield has been damaged\r\n              dispatch({\r\n                type: ACTIONS.UPDATE_CARD,\r\n                payload: {\r\n                  playerNum: playerTurn,\r\n                  cardId: playerHeroId,\r\n                  updateKeys: [\"zaryaShieldRemaining\"],\r\n                  updateValues: [shieldValue],\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        audioFile: \"zarya-ult\",\r\n        synergyCost: 3,\r\n      },\r\n    },\r\n    zenyatta: {\r\n      ability1: {\r\n        audioFile: \"zenyatta-harmony\",\r\n        run() {\r\n          // Wait for user click\r\n          return new Promise((resolve, reject) => {\r\n            // When a row is clicked\r\n            $(\".card\").on(\"click\", (e) => {\r\n              // Get target information & remove onclick\r\n              const targetCardId = $(e.target).closest(\".card\").attr(\"id\");\r\n              $(\".card\").off(\"click\");\r\n              const targetRow = $(e.target).closest(\".row\").attr(\"id\");\r\n              const targetPlayer = parseInt(targetCardId[0]);\r\n\r\n              // Check target is valid\r\n              if (targetRow[0] === \"p\") {\r\n                reject(\"Incorrect target\");\r\n                return;\r\n              }\r\n\r\n              // Apply ally/enemy effect depending on which card was clicked\r\n              let effectId;\r\n              targetPlayer === playerTurn\r\n                ? (effectId = \"zenyattaAllyEffect\")\r\n                : (effectId = \"zenyattaEnemyEffect\");\r\n\r\n              // Harmony orb applies healing immediately, as well as over time\r\n              if (effectId === \"zenyattaAllyEffect\") {\r\n                const healingValue = 1;\r\n                applyHealing(healingValue, targetCardId);\r\n              }\r\n\r\n              // Set state\r\n              dispatch({\r\n                type: ACTIONS.ADD_CARD_EFFECT,\r\n                payload: {\r\n                  targetCardId: targetCardId,\r\n                  playerHeroId: `${playerTurn}zenyatta`,\r\n                  effectId: effectId,\r\n                },\r\n              });\r\n\r\n              resolve();\r\n            });\r\n          });\r\n        },\r\n      },\r\n      ability2: {\r\n        synergyCost: 3,\r\n        audioFile: \"zenyatta-ult\",\r\n        run() {},\r\n      },\r\n      zenyattaAllyEffect: {\r\n        run(cardId) {\r\n          const healingValue = 1;\r\n\r\n          applyHealing(healingValue, cardId);\r\n\r\n          return;\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  // Handle the calling of hero abilites, including checking the ability call is valid\r\n  async function activateAbility1(e) {\r\n    e.stopPropagation();\r\n\r\n    // keep track of which hero is currently using their ability\r\n    currentHeroAbilityRef.current = playerHeroId;\r\n\r\n    unsetCardFocus();\r\n\r\n    // TODO: Check any effects that trigger on ability usage\r\n\r\n    // Check that the card is not in the player's hand\r\n    if (rowId[0] !== \"p\") {\r\n      // Call the relevant hero's ability\r\n      try {\r\n        // Play ability audio if exists\r\n        if (\"audioFile\" in abilities[heroId].ability1 && playAudio === true) {\r\n          const audioFile = abilities[heroId].ability1.audioFile;\r\n          const ability1audio = new Audio(\r\n            require(`assets/audio/${audioFile}.mp3`).default\r\n          );\r\n          ability1audio.play();\r\n        }\r\n\r\n        // Allow the ability to be triggered more than once if relevant\r\n        const maxTargets = abilities[heroId].ability1.maxTargets;\r\n        let i = 0;\r\n        do {\r\n          await abilities[heroId].ability1.run();\r\n          unsetCardFocus();\r\n          i++;\r\n        } while (\"maxTargets\" in abilities[heroId].ability1 && i < maxTargets);\r\n\r\n        // Set ability as used\r\n        dispatch({\r\n          type: ACTIONS.EDIT_CARD,\r\n          payload: {\r\n            playerNum: playerTurn,\r\n            targetCardId: playerHeroId,\r\n            editKeys: [\"ability1Used\"],\r\n            editValues: [true],\r\n          },\r\n        });\r\n      } catch (err) {\r\n        alert(err);\r\n      }\r\n    } else alert(\"Play cards before using abilities!\");\r\n  }\r\n\r\n  async function activateAbility2(e) {\r\n    e.stopPropagation();\r\n\r\n    // keep track of which hero is currently using their ability\r\n    currentHeroAbilityRef.current = playerHeroId;\r\n\r\n    // Get synergy values\r\n    const synergyCost = abilities[heroId].ability2.synergyCost;\r\n    const rowSynergy = gameState.rows[rowId].synergy;\r\n    unsetCardFocus();\r\n\r\n    // TODO: Check any effects that trigger on ability usage\r\n\r\n    // Check that the card is not in the player's hand\r\n    if (rowId[0] !== \"p\") {\r\n      // Check there is sufficient synergy to use the ability\r\n      if (rowSynergy >= synergyCost) {\r\n        // Call the relevant hero's ability and deduct synergy\r\n        try {\r\n          // Play ability audio if exists\r\n          if (\"audioFile\" in abilities[heroId].ability2 && playAudio === true) {\r\n            const audioFile = abilities[heroId].ability2.audioFile;\r\n            const ability2audio = new Audio(\r\n              require(`assets/audio/${audioFile}.mp3`).default\r\n            );\r\n            ability2audio.play();\r\n          }\r\n\r\n          // Allow multiple targets if applicable\r\n          const maxTargets = abilities[heroId].ability2.maxTargets;\r\n          let i = 0;\r\n          do {\r\n            await abilities[heroId].ability2.run();\r\n            i++;\r\n          } while (\r\n            \"maxTargets\" in abilities[heroId].ability2 &&\r\n            i < maxTargets\r\n          );\r\n\r\n          // Record which ult was used for Echo's ability2\r\n          // TODO: delete localstore on unmount?\r\n          if (heroId !== \"echo\") localStorage.setItem(\"echoUltHeroId\", heroId);\r\n\r\n          // Subtract ability synergy cost from row synergy\r\n          // Make synergy negative so that the cost is subtracted, not added\r\n          dispatch({\r\n            type: ACTIONS.UPDATE_SYNERGY,\r\n            payload: {\r\n              rowId: rowId,\r\n              synergyCost: Math.abs(synergyCost) * -1,\r\n            },\r\n          });\r\n\r\n          // Set ability as used\r\n          dispatch({\r\n            type: ACTIONS.EDIT_CARD,\r\n            payload: {\r\n              playerNum: playerTurn,\r\n              targetCardId: playerHeroId,\r\n              editKeys: [\"ability2Used\"],\r\n              editValues: [true],\r\n            },\r\n          });\r\n        } catch (err) {\r\n          alert(err);\r\n        }\r\n      } else alert(\"Insufficient synergy!\");\r\n    } else alert(\"Play cards before using abilities!\");\r\n  }\r\n\r\n  // Apply card effects every turn\r\n  useEffect(() => {\r\n    // Check the turn count has increased - ensures effects only trigger once per turn\r\n    if (turnState.turnCount > turnRef.current.turnCount) {\r\n      // Identify player row ids\r\n      const playerTurn = turnState.playerTurn;\r\n      const playerRowIds = [\r\n        `${playerTurn}b`,\r\n        `${playerTurn}m`,\r\n        `${playerTurn}f`,\r\n      ];\r\n\r\n      // Get all effects currently applied to rows and cards\r\n      // Run each 'turnstart' effect on each row\r\n      for (let rowId of playerRowIds) {\r\n        const allyRowEffects = gameState.rows[rowId].allyEffects;\r\n        const enemyRowEffects = gameState.rows[rowId].enemyEffects;\r\n\r\n        // Run ally row effects\r\n        for (let effect of allyRowEffects) {\r\n          if (effect.on === \"turnstart\") {\r\n            abilities[effect.hero][effect.id].run(rowId);\r\n            console.log(`running ${effect.id} on ${rowId}`);\r\n          }\r\n        }\r\n\r\n        // Run ally card effects\r\n        for (let cardId of gameState.rows[rowId].cardIds) {\r\n          const cardEffects =\r\n            gameState.playerCards[`player${playerTurn}cards`].cards[cardId]\r\n              .allyEffects;\r\n          for (let effect of cardEffects) {\r\n            if (effect.on === \"turnstart\") {\r\n              console.log(`running ${JSON.stringify(effect)} on ${rowId}`);\r\n              abilities[effect.hero][effect.id].run(cardId);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Run enemy row effects\r\n        for (let effect of enemyRowEffects) {\r\n          if (effect.on === \"turnstart\") {\r\n            abilities[effect.hero][effect.id].run(rowId);\r\n            console.log(`running ${effect.id} on ${rowId}`);\r\n          }\r\n        }\r\n\r\n        // Run enemy card effects\r\n        for (let cardId of gameState.rows[rowId].cardIds) {\r\n          const cardEffects =\r\n            gameState.playerCards[`player${playerTurn}cards`].cards[cardId]\r\n              .enemyEffects;\r\n          for (let effect of cardEffects) {\r\n            if (effect.on === \"turnstart\") {\r\n              console.log(`running ${JSON.stringify(effect)} on ${rowId}`);\r\n              abilities[effect.hero][effect.id].run(cardId);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Update ref to current turn\r\n    turnRef.current.turnCount = turnState.turnCount;\r\n  }, [turnState, gameState.playerCards, gameState.rows]);\r\n\r\n  return (\r\n    <div id=\"abilitiescontainer\">\r\n      {\"ability1\" in abilities[heroId] &&\r\n        currentCard.ability1Used === false && (\r\n          <div\r\n            id=\"ability1\"\r\n            className=\"ability ability1\"\r\n            onClick={activateAbility1}\r\n          ></div>\r\n        )}\r\n      {\"ability2\" in abilities[heroId] &&\r\n        currentCard.ability2Used === false && (\r\n          <div\r\n            id=\"ability2\"\r\n            className=\"ability ability2\"\r\n            onClick={activateAbility2}\r\n          ></div>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useRef, useEffect, useState } from \"react\";\r\nimport HeroAbilities from \"components/cards/HeroAbilities\";\r\nimport gameContext from \"context/gameContext\";\r\nimport HealthCounter from \"components/cards/HealthCounter\";\r\nimport ShieldCounter from \"components/cards/ShieldCounter\";\r\n\r\nexport default function CardFocus(props) {\r\n  const { gameState, dispatch } = useContext(gameContext);\r\n  const cardFocus = props.cardFocus;\r\n  const setCardFocus = props.setCardFocus;\r\n  const unsetCardFocus = props.unsetCardFocus;\r\n  const heroRef = useRef();\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  // Remember the last card to be focused, and use that card's data so an error isnt thrown\r\n  useEffect(() => {\r\n    if (cardFocus !== \"invisible\") {\r\n      heroRef.current = cardFocus;\r\n    }\r\n  });\r\n\r\n  // If cardFocus has been set to invisible, still render the component, but exclude all visible elements\r\n  // This is needed to ensure the 'turnstart' effects are picked up by HeroAbilities useEffect\r\n  // TODO: using 'display: none' still renders the element, maybe that is a cleaner way to implement this\r\n  if (cardFocus === \"invisible\") {\r\n    const playerHeroId = heroRef.current.playerHeroId;\r\n    const playerNum = parseInt(playerHeroId[0]);\r\n    const rowId = heroRef.current.rowId;\r\n\r\n    return (\r\n      <div id=\"cardfocuscontainer\">\r\n        <div id={`cardfocus`} className=\"cardfocus\">\r\n          <HeroAbilities\r\n            playerHeroId={playerHeroId}\r\n            rowId={rowId}\r\n            cardFocus={cardFocus}\r\n            setCardFocus={setCardFocus}\r\n            unsetCardFocus={unsetCardFocus}\r\n            setNextCardDraw={props.setNextCardDraw}\r\n            playAudio={props.playAudio}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    const playerHeroId = cardFocus.playerHeroId;\r\n    const playerNum = parseInt(playerHeroId[0]);\r\n    const rowId = cardFocus.rowId;\r\n\r\n    // Get card attributes from relevant player\r\n    const {\r\n      id,\r\n      name,\r\n      health,\r\n      shield,\r\n      effect,\r\n      enemyEffects,\r\n      allyEffects,\r\n      isDiscarded,\r\n    } = gameState.playerCards[`player${playerNum}cards`].cards[playerHeroId];\r\n\r\n    return (\r\n      <div id=\"cardfocuscontainer\">\r\n        <div\r\n          id={`${playerHeroId}-cardfocus`}\r\n          className=\"cardfocus\"\r\n          onClick={props.unsetCardFocus}\r\n        >\r\n          {imageLoaded === playerHeroId && (\r\n            <HealthCounter type=\"cardfocuscounter\" health={health} />\r\n          )}\r\n          {shield > 0 && (\r\n            <ShieldCounter type=\"cardfocuscounter\" shield={shield} />\r\n          )}\r\n          <img\r\n            src={require(`assets/heroes/cardfocus/${id}.webp`).default}\r\n            className=\"cardimg\"\r\n            alt={\"Card Focus\"}\r\n            onLoad={() => setImageLoaded(playerHeroId)}\r\n          />\r\n          {health > 0 ? (\r\n            <HeroAbilities\r\n              playerHeroId={playerHeroId}\r\n              rowId={rowId}\r\n              cardFocus={cardFocus}\r\n              setCardFocus={setCardFocus}\r\n              unsetCardFocus={unsetCardFocus}\r\n              setNextCardDraw={props.setNextCardDraw}\r\n              playAudio={props.playAudio}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"./Tutorial.css\";\r\n\r\nfunction Tutorial() {\r\n  const closeTutorialStyle = {\r\n    position: \"absolute\",\r\n    right: \"10px\",\r\n    top: \"10px\",\r\n    fontSize: \"2rem\",\r\n    cursor: \"pointer\",\r\n  };\r\n\r\n  const tutorialHatStyle = {\r\n    fontSize: \"2rem\",\r\n    color: \"inherit\",\r\n  };\r\n\r\n  function openCloseTutorial(e) {\r\n    if (\r\n      e.target.id === \"tutorial-container\" ||\r\n      e.target.id === \"closetutorial\"\r\n    ) {\r\n      $(\"#tutorial-container\").removeClass(\"open\");\r\n    }\r\n  }\r\n\r\n  function switchTutorialTab(targetId) {\r\n    $(\".tutorial-content\").hide();\r\n    $(`#${targetId}`).show();\r\n  }\r\n\r\n  const tutorialCounterStyle = {\r\n    display: \"inline-flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: \"50%\",\r\n    margin: \"4px\",\r\n    fontFamily: \"Big-Noodle-Titling\",\r\n  };\r\n\r\n  const powerStyle = {\r\n    display: \"inline-flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n    backgroundColor: \"#fa9c1e\",\r\n    color: \"white\",\r\n    borderRadius: \"50%\",\r\n\r\n    fontSize: \"1.5em\",\r\n  };\r\n\r\n  const synergyStyle = {\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n    color: \"white\",\r\n    fontSize: \"1em\",\r\n    border: \"3px solid steelblue\",\r\n    backgroundColor: \"#3f547a\",\r\n  };\r\n\r\n  const matchStyle = {\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n    backgroundColor: \"#fa9c1e\",\r\n    color: \"black\",\r\n    fontSize: \"1.5em\",\r\n    margin: \"2px\",\r\n  };\r\n\r\n  const healthStyle = {\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n    fontSize: \"0.8em\",\r\n    borderRadius: \"100%\",\r\n  };\r\n\r\n  const effectStyle = {};\r\n\r\n  return (\r\n    <div onClick={openCloseTutorial} id=\"tutorial-container\" className=\"open\">\r\n      <div id=\"tutorial\">\r\n        <div id=\"tutorial-content-container\">\r\n          <div className=\"tutorial-header\">\r\n            <i\r\n              onClick={openCloseTutorial}\r\n              style={closeTutorialStyle}\r\n              id=\"closetutorial\"\r\n              className=\"far fa-times-circle\"\r\n            ></i>\r\n            <a\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n              href={require(\"assets/how-to-play.pdf\").default}\r\n              id=\"howtoplay\"\r\n              style={{ color: \"inherit\" }}\r\n            >\r\n              <i style={tutorialHatStyle} className=\"fas fa-graduation-cap\"></i>\r\n            </a>\r\n            <span id=\"tutorial-title\">How To Play</span>\r\n            <div id=\"tutorial-tabs\">\r\n              <div\r\n                className=\"tutorial-tab\"\r\n                onClick={() => switchTutorialTab(\"overview-content\")}\r\n              >\r\n                <i className=\"fas fa-eye\"></i>\r\n                Overview\r\n              </div>\r\n              <div\r\n                className=\"tutorial-tab\"\r\n                onClick={() => switchTutorialTab(\"card-info-content\")}\r\n              >\r\n                <i className=\"fas fa-exclamation\"></i>\r\n                Card Info\r\n              </div>\r\n              <div\r\n                className=\"tutorial-tab\"\r\n                onClick={() => switchTutorialTab(\"turn-actions-content\")}\r\n              >\r\n                <i className=\"fas fa-hourglass-half\"></i>Turn Actions\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Overview */}\r\n          <div id=\"overview-content\" className=\"tutorial-content\">\r\n            <div id=\"overview-container\" className=\"tutorial-content-container\">\r\n              <div className=\"overview-section\">\r\n                <img\r\n                  src={require(\"assets/overview.gif\").default}\r\n                  alt=\"Game overview\"\r\n                  className=\"tutorial-image\"\r\n                />\r\n                <div className=\"tutorial-section\">\r\n                  <div className=\"tutorial-heading\">How to win</div>\r\n                  <span>\r\n                    <p>\r\n                      When a card is played, that card's Power score is added to\r\n                      that player's Power score{\" \"}\r\n                      <span style={{ ...powerStyle, ...tutorialCounterStyle }}>\r\n                        8\r\n                      </span>\r\n                      (please see the Card Info section for a detailed breakdown\r\n                      of the cards' layout). The player with the highest Power\r\n                      score at the end of the round wins the round, with two\r\n                      rounds needed to win the match{\" \"}\r\n                      <span\r\n                        style={{\r\n                          ...matchStyle,\r\n                          ...tutorialCounterStyle,\r\n                          backgroundColor: \"aqua\",\r\n                        }}\r\n                      >\r\n                        2\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          ...matchStyle,\r\n                          ...tutorialCounterStyle,\r\n                          backgroundColor: \"red\",\r\n                        }}\r\n                      >\r\n                        1\r\n                      </span>\r\n                      . The round is over when both players have played six\r\n                      cards and pressed the Pass button.\r\n                    </p>\r\n                    <p>\r\n                      If both players have the same Power score, the player with\r\n                      the higher total Synergy wins. If both players' Synergy\r\n                      scores are also tied, the round is a draw and neither\r\n                      player receives a win.\r\n                    </p>\r\n                  </span>\r\n                </div>\r\n                <div className=\"tutorial-section\">\r\n                  <div className=\"tutorial-heading\">Starting a game</div>\r\n                  <p>\r\n                    <span>\r\n                      Both players should begin by drawing 8 cards each. Then\r\n                      the players each take turns to play one card per turn. At\r\n                      the end of your turn, click the End Turn button to allow\r\n                      the other player to take their turn. You can tell which\r\n                      player's turn it is by which cards are facing up. To find\r\n                      out exactly what you can do on your turn, please see the\r\n                      Turn Actions section above.\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n                <div className=\"tutorial-section\">\r\n                  <div className=\"tutorial-heading\">\r\n                    Scores, abilities and counters\r\n                  </div>\r\n\r\n                  <span>\r\n                    <ul className=\"tutorial-list\">\r\n                      <li>\r\n                        <span\r\n                          style={{\r\n                            ...powerStyle,\r\n                            ...tutorialCounterStyle,\r\n                            width: \"40px\",\r\n                            height: \"40px\",\r\n                            fontSize: \"2rem\",\r\n                          }}\r\n                        >\r\n                          8\r\n                        </span>\r\n                        <span className=\"counter-desc\">\r\n                          <strong>Power: </strong>Each player has one Power\r\n                          score which increases as cards are played. A card's\r\n                          Power is subtracted from the player's Power score if\r\n                          it is defeated. The player with the higher power score\r\n                          at the end of the round wins.\r\n                        </span>\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          style={{\r\n                            ...synergyStyle,\r\n                            ...tutorialCounterStyle,\r\n                            width: \"40px\",\r\n                            height: \"40px\",\r\n                            fontSize: \"2rem\",\r\n                            border: \"5px solid steelblue\",\r\n                          }}\r\n                        >\r\n                          3\r\n                        </span>\r\n                        <span className=\"counter-desc\">\r\n                          <strong>Synergy: </strong>Each row has its own Synergy\r\n                          score. The row's synergy increases as Heroes are\r\n                          played into that row. Synergy is spent when Heroes use\r\n                          their Ultimate Ability.\r\n                        </span>\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          style={{\r\n                            ...tutorialCounterStyle,\r\n                            ...healthStyle,\r\n                            width: \"40px\",\r\n                            height: \"44px\",\r\n                            fontSize: \"2rem\",\r\n                          }}\r\n                          className={`healthcounter counter tutorial-counter`}\r\n                        >\r\n                          4\r\n                        </span>\r\n                        <span className=\"counter-desc\">\r\n                          <strong>Health: </strong>How much damage the Hero can\r\n                          take before it is defeated. A defeated Hero's Power is\r\n                          subtracted from the player's Power score.\r\n                        </span>\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          style={{\r\n                            ...tutorialCounterStyle,\r\n                            ...healthStyle,\r\n                            width: \"40px\",\r\n                            height: \"44px\",\r\n                            fontSize: \"2rem\",\r\n                          }}\r\n                          className={`shieldcounter counter`}\r\n                        >\r\n                          2\r\n                        </span>\r\n                        <span className=\"counter-desc\">\r\n                          <strong>Shield: </strong>A Shield can be placed either\r\n                          on a specific Hero or on an entire row. If a Hero has\r\n                          Shield or is in a row that has Shield, the Shield will\r\n                          take any damage before the Hero's Health takes damage.\r\n                        </span>\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          style={{ ...effectStyle, ...tutorialCounterStyle }}\r\n                          className=\"counter\"\r\n                        >\r\n                          <img\r\n                            src={\r\n                              require(`assets/heroes/cards/mercy-icon.webp`)\r\n                                .default\r\n                            }\r\n                            className=\"counter herocounter\"\r\n                            alt=\"Hero Counter\"\r\n                          />\r\n                        </span>\r\n                        <span className=\"counter-desc\">\r\n                          <strong>Effects: </strong>There are a number of\r\n                          different positive and negative Effects that Heroes\r\n                          can apply to ally and enemy Heroes, as well as ally\r\n                          and enemy rows. If a Hero applies an Effect to a Hero\r\n                          or row, the Hero's counter will show up next to the\r\n                          row or on the Hero card. These counters can be clicked\r\n                          to show the card which applied the Effect, so that you\r\n                          can easily read the Ability description to understand\r\n                          what the Effect does.\r\n                        </span>\r\n                      </li>\r\n                    </ul>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Card Info */}\r\n          <div id=\"card-info-content\" className=\"tutorial-content\" hidden>\r\n            <div\r\n              id=\"card-info-container\"\r\n              className=\"tutorial-content-container\"\r\n            >\r\n              <div id=\"card-info-left\" className=\"card-info\">\r\n                <div className=\"card-info-section tutorial-section\">\r\n                  <span className=\"tutorial-heading\">Class</span>\r\n                  <div id=\"card-info-class\">\r\n                    <span>\r\n                      <img\r\n                        src={require(\"assets/offence-classicon.webp\").default}\r\n                        alt=\"Offence class icon\"\r\n                        className=\"classicon\"\r\n                      />\r\n                      <span>\r\n                        <strong>Offence</strong> - High damage\r\n                      </span>\r\n                    </span>\r\n                    <span>\r\n                      <img\r\n                        src={require(\"assets/defence-classicon.webp\").default}\r\n                        alt=\"Defence class icon\"\r\n                        className=\"classicon\"\r\n                      />\r\n                      <span>\r\n                        <strong>Defense</strong> - Area control and status\r\n                        effects\r\n                      </span>\r\n                    </span>\r\n                    <span>\r\n                      <img\r\n                        src={require(\"assets/tank-classicon.webp\").default}\r\n                        alt=\"Tank class icon\"\r\n                        className=\"classicon\"\r\n                      />\r\n                      <span>\r\n                        <strong>Tank</strong> - Shields and good survivability\r\n                      </span>\r\n                    </span>\r\n                    <span>\r\n                      <img\r\n                        src={require(\"assets/support-classicon.webp\").default}\r\n                        alt=\"Support class icon\"\r\n                        className=\"classicon\"\r\n                      />\r\n                      <span>\r\n                        <span>\r\n                          <strong>Support</strong> - Healing and damage boost\r\n                        </span>\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  id=\"hero-name-section\"\r\n                  className=\"card-info-section tutorial-section\"\r\n                >\r\n                  <span className=\"tutorial-heading\">Hero Name</span>\r\n                </div>\r\n                <div className=\"card-info-section tutorial-section\">\r\n                  <span className=\"tutorial-heading\">Power/Synergy Scores</span>\r\n                  <div>\r\n                    When you play a Hero card, the Hero's power and synergy are\r\n                    added to your Power and Synergy scores. The amount of Power\r\n                    and Synergy added depends on which row the Hero is put in.\r\n                    These circles represent the three rows (top circle - front\r\n                    row, middle circle - middle row, bottom circle - back row)\r\n                    with Power on the left and Synergy on the right.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div id=\"card-info-center\" className=\"card-info\">\r\n                <img\r\n                  src={require(`assets/dva-example.webp`).default}\r\n                  alt=\"Card tutorial\"\r\n                />\r\n              </div>\r\n              <div id=\"card-info-right\" className=\"card-info\">\r\n                <div className=\"card-info-section tutorial-section\">\r\n                  <span className=\"tutorial-heading\">Health</span>\r\n                  <div id=\"card-info-class\">\r\n                    How much damage this Hero can take before being defeated. A\r\n                    defeated Hero's card will turn grey when their health drops\r\n                    to 0.\r\n                  </div>\r\n                </div>\r\n                <div className=\"card-info-section tutorial-section\">\r\n                  <span className=\"tutorial-heading\">Shield</span>\r\n                  <div id=\"card-info-class\">\r\n                    Some Heroes have the ability to shield themselves, other\r\n                    Heroes, or even an entire row. Shields will take damage in\r\n                    place of a Hero's health.\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  {/* Spacer div to separate health/shields from abilities descriptions */}\r\n                </div>\r\n                <div className=\"card-info-section tutorial-section\">\r\n                  <span className=\"tutorial-heading\">Deploy Ability</span>\r\n                  <div>\r\n                    You may choose to use this ability only when you play this\r\n                    card from your hand.\r\n                  </div>\r\n                </div>\r\n                <div className=\"card-info-section tutorial-section\">\r\n                  <span className=\"tutorial-heading\">Ultimate Ability</span>\r\n                  <div>\r\n                    You may use this ability at any time after the card has been\r\n                    played and is still alive, but you must have sufficient\r\n                    synergy in the Hero's row.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Turn Actions */}\r\n          <div id=\"turn-actions-content\" className=\"tutorial-content\" hidden>\r\n            <div className=\"tutorial-content-container\">\r\n              <div className=\"tutorial-intro\">\r\n                <p>During your turn you can carry out the following actions:</p>\r\n              </div>\r\n              <div className=\"tutorial-section\">\r\n                <div className=\"tutorial-heading\">Play a Hero Card</div>\r\n                <span>\r\n                  <p>\r\n                    Drag 1 Hero Card from your hand into the Front, Middle, or\r\n                    Back Row. Any effects that occur when a Hero is played\r\n                    trigger NOW. The card's Power and Synergy scores will be\r\n                    added to your scores at this point.\r\n                  </p>\r\n                </span>\r\n              </div>\r\n              <div className=\"tutorial-section\">\r\n                <span className=\"tutorial-heading\">Use Deploy Ability</span> (if\r\n                you wish)\r\n                <br />\r\n                <span>\r\n                  <p>\r\n                    In order to use a Hero's ability, click on the Hero Card.\r\n                    This will show a larger version of the card in the middle of\r\n                    your screen, which is called the Card Focus. Click on the\r\n                    text of the ability that you want to use. If the ability\r\n                    requires you to target an ally or enemy card, click on the\r\n                    card to choose it as your target.\r\n                  </p>\r\n                  <p>\r\n                    A Hero's Deploy Ability can only be used right after you\r\n                    play them onto the battlefield. If you decide to NOT use\r\n                    their Deploy Ability you may not use it at a later time\r\n                    unless they have been returned to your hand and played\r\n                    again.\r\n                  </p>\r\n                  <p>\r\n                    <strong>Please Note: </strong>The ability descriptions have\r\n                    not been changed from the original tabletop game, and may\r\n                    refer to placing tokens or rotating cards when abilities\r\n                    happen which are irrelevant to the digital version.\r\n                  </p>\r\n                </span>\r\n              </div>\r\n              <div className=\"tutorial-section\">\r\n                <div className=\"tutorial-heading\">\r\n                  Activate an Ultimate Ability\r\n                </div>\r\n                <span>\r\n                  <p>\r\n                    Choose a Hero that has already been played and activate\r\n                    their Ultimate Ability. There must be enough Synergy{\" \"}\r\n                    <span style={{ ...synergyStyle, ...tutorialCounterStyle }}>\r\n                      3\r\n                    </span>{\" \"}\r\n                    in that row to pay for the cost of the Ultimate Ability. You\r\n                    may only use each Ultimate Ability once per round unless the\r\n                    Hero has been returned to your hand and played a second\r\n                    time.\r\n                  </p>\r\n                  <p>\r\n                    Once the Ultimate Ability has been used, the Synergy cost\r\n                    will be deducted from the row's Synergy score.\r\n                  </p>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"tutorial-section\">\r\n                <div className=\"tutorial-heading\">Pass</div>\r\n                <span>\r\n                  <p>\r\n                    You must have six cards on the battlefield in order to\r\n                    choose the Pass Action. After passing you may take no more\r\n                    actions this round.\r\n                  </p>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tutorial;\r\n","import React, { useState, useReducer, useEffect, useRef } from \"react\";\r\nimport gameContext from \"context/gameContext\";\r\nimport turnContext from \"context/turnContext\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"./App.css\";\r\nimport \"./1300.css\";\r\nimport \"./760.css\";\r\nimport PlayerHalf from \"components/layout/PlayerHalf\";\r\nimport TitleCard from \"components/layout/TitleCard\";\r\nimport Footer from \"components/layout/Footer\";\r\nimport CardFocus from \"components/cards/CardFocus\";\r\nimport AudioPlayer from \"components/layout/AudioPlayer\";\r\nimport MatchCounter from \"components/layout/MatchCounter\";\r\nimport data from \"data\";\r\nimport getRandInt, { PlayerCard } from \"helper\";\r\nimport produce from \"immer\";\r\nimport _ from \"lodash\";\r\nimport $ from \"jquery\";\r\nimport Tutorial from \"components/layout/Tutorial\";\r\n\r\nexport const ACTIONS = {\r\n  ADD_CARD_EFFECT: \"add-card-effect\",\r\n  ADD_CARD_TO_HAND: \"add-card-to-hand\",\r\n  ADD_ROW_EFFECT: \"add-row-effect\",\r\n  ADD_ROW_SHIELD: \"add-row-shield\",\r\n  CREATE_CARD: \"create-card\",\r\n  DAMAGE_ROW_SHIELD: \"damage-row-shield\",\r\n  DISCARD_CARD: \"discard-card\",\r\n  EDIT_CARD: \"edit-card\",\r\n  EDIT_ROW: \"edit-row\",\r\n  MOVE_CARD: \"move-card\",\r\n  REMOVE_EFFECTS: \"remove-effects\",\r\n  SET_POWER: \"set-power\",\r\n  SET_SYNERGY: \"set-synergy\",\r\n  UPDATE_CARD: \"update-card\",\r\n  UPDATE_POWER: \"update-power\",\r\n  UPDATE_ROW: \"update-row\",\r\n  UPDATE_SYNERGY: \"update-synergy\",\r\n};\r\n\r\nfunction reducer(gameState, action) {\r\n  switch (action.type) {\r\n    // Add hero effect to a card\r\n    case ACTIONS.ADD_CARD_EFFECT: {\r\n      return produce(gameState, (draft) => {\r\n        // Payload info\r\n        const targetCardId = action.payload.targetCardId;\r\n        const targetPlayer = targetCardId[0];\r\n        const playerHeroId = action.payload.playerHeroId;\r\n        const effectId = action.payload.effectId;\r\n\r\n        // Get effect object from state\r\n        const playerNum = parseInt(playerHeroId[0]);\r\n        const cardEffect =\r\n          gameState.playerCards[`player${playerNum}cards`].cards[playerHeroId]\r\n            .effects[effectId];\r\n\r\n        return produce(gameState, (draft) => {\r\n          if (cardEffect.player === \"ally\") {\r\n            draft.playerCards[`player${targetPlayer}cards`].cards[\r\n              targetCardId\r\n            ].allyEffects.push(cardEffect);\r\n          } else if (cardEffect.player === \"enemy\") {\r\n            draft.playerCards[`player${targetPlayer}cards`].cards[\r\n              targetCardId\r\n            ].enemyEffects.push(cardEffect);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    // Add hero effect to a row\r\n    case ACTIONS.ADD_ROW_EFFECT: {\r\n      // Payload info\r\n      const targetRow = action.payload.targetRow;\r\n      const playerHeroId = action.payload.playerHeroId;\r\n      const effectId = action.payload.effectId;\r\n      const playerNum = parseInt(playerHeroId[0]);\r\n      // Get effect object from state\r\n      const rowEffect =\r\n        gameState.playerCards[`player${playerNum}cards`].cards[playerHeroId]\r\n          .effects[effectId];\r\n\r\n      return produce(gameState, (draft) => {\r\n        if (rowEffect.player === \"ally\") {\r\n          draft.rows[targetRow].allyEffects.push(rowEffect);\r\n        } else if (rowEffect.player === \"enemy\") {\r\n          draft.rows[targetRow].enemyEffects.push(rowEffect);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Add shield value to row\r\n    case ACTIONS.ADD_ROW_SHIELD: {\r\n      const playerHeroId = action.payload.playerHeroId;\r\n      const targetRow = action.payload.targetRow;\r\n      const rowShield = action.payload.rowShield;\r\n\r\n      // If hero already added shield to row, increase shield, else set shield\r\n      return produce(gameState, (draft) => {\r\n        draft.rows[targetRow].shield.push({\r\n          playerHeroId: playerHeroId,\r\n          shieldValue: rowShield,\r\n        });\r\n      });\r\n    }\r\n\r\n    // Add a created card in to the player's hand\r\n    case ACTIONS.ADD_CARD_TO_HAND: {\r\n      const playerNum = action.payload.playerNum;\r\n      const playerHeroId = action.payload.playerHeroId;\r\n\r\n      return produce(gameState, (draft) => {\r\n        draft.rows[`player${playerNum}hand`].cardIds.push(playerHeroId);\r\n      });\r\n    }\r\n\r\n    // Adds a card to player's cards (doesn't add to a row)\r\n    case ACTIONS.CREATE_CARD: {\r\n      const playerNum = action.payload.playerNum;\r\n      const heroId = action.payload.heroId;\r\n      const newCard = new PlayerCard(playerNum, heroId);\r\n\r\n      // Add new card to playercards data (does not add the card to any row)\r\n      // Call Move_Card to make card visible\r\n      return produce(gameState, (draft) => {\r\n        draft.playerCards[`player${playerNum}cards`].cards[\r\n          newCard.playerHeroId\r\n        ] = newCard;\r\n      });\r\n    }\r\n\r\n    // Damage a row's shields\r\n    case ACTIONS.DAMAGE_ROW_SHIELD: {\r\n      const targetRow = action.payload.targetRow;\r\n      const rowShieldDamage = action.payload.rowShieldDamage;\r\n\r\n      console.log(`applying ${rowShieldDamage} damage to row ${targetRow}`);\r\n\r\n      return produce(gameState, (draft) => {\r\n        const targetRowShieldArr = draft.rows[targetRow].shield;\r\n        let damageDone = 0;\r\n\r\n        // Reduce shield of each shieldEntry in the array until 0, then move on to the next until full damage is done\r\n        // Use labeled break to break out of both loops if full damage has been done\r\n        outer: for (let x = 0; x < targetRowShieldArr.length; x++) {\r\n          for (let i = 0; i < rowShieldDamage; i++) {\r\n            if (damageDone === rowShieldDamage) break outer;\r\n\r\n            targetRowShieldArr[x].shieldValue -= 1;\r\n            damageDone += 1;\r\n\r\n            console.log(\r\n              `${targetRowShieldArr[x].playerHeroId}'s shield is now ${targetRowShieldArr[x].shieldValue}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Delete entries in shield array if their shieldValue has been reduced to 0\r\n        for (let x = 0; x < targetRowShieldArr.length; x++) {\r\n          if (targetRowShieldArr[x].shieldValue === 0) {\r\n            targetRowShieldArr.splice(x, 1);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Discard a card\r\n    case ACTIONS.DISCARD_CARD: {\r\n      const targetCardId = action.payload.targetCardId;\r\n      const targetCardRow = action.payload.targetCardRow;\r\n      const playerNum = parseInt(targetCardId[0]);\r\n\r\n      // Identify affected card, mark as discarded, and remove from relevant row\r\n      return produce(gameState, (draft) => {\r\n        draft.playerCards[`player${playerNum}cards`].cards[\r\n          targetCardId\r\n        ].isDiscarded = true;\r\n        draft.rows[targetCardRow].cardIds = draft.rows[\r\n          targetCardRow\r\n        ].cardIds.filter((cardId) => cardId !== targetCardId);\r\n      });\r\n    }\r\n\r\n    // Replace a value\r\n    case ACTIONS.EDIT_CARD: {\r\n      // Required variables\r\n      const playerNum = action.payload.playerNum;\r\n      const targetCardId = action.payload.targetCardId;\r\n      const editKeys = action.payload.editKeys;\r\n      const editValues = action.payload.editValues;\r\n\r\n      // Identify affected card and apply all edits\r\n      return produce(gameState, (draft) => {\r\n        let targetCard =\r\n          draft.playerCards[`player${playerNum}cards`].cards[targetCardId];\r\n\r\n        // Use lodash to set object properties (allows a string to be used for a nested object path)\r\n        for (let i = 0; i < editKeys.length; i++) {\r\n          _.set(targetCard, editKeys[i], editValues[i]);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Replaces existing values with new values\r\n    case ACTIONS.EDIT_ROW: {\r\n      const targetRow = action.payload.targetRow;\r\n      const editKeys = action.payload.editKeys;\r\n      const editValues = action.payload.editValues;\r\n\r\n      // Identify affected card and apply all edits\r\n      return produce(gameState, (draft) => {\r\n        for (let i = 0; i < editKeys.length; i++) {\r\n          draft.rows[targetRow][editKeys[i]] = editValues[i];\r\n        }\r\n      });\r\n    }\r\n\r\n    // Moves a card within or between rows\r\n    case ACTIONS.MOVE_CARD: {\r\n      // Variables from payload\r\n      const targetCardId = action.payload.targetCardId;\r\n      const startRowId = action.payload.startRowId;\r\n      const startIndex = action.payload.startIndex;\r\n      const finishRowId = action.payload.finishRowId;\r\n      const finishIndex = action.payload.finishIndex;\r\n\r\n      // Variables from game state\r\n      const startRow = gameState.rows[startRowId];\r\n      const finishRow = gameState.rows[finishRowId];\r\n\r\n      // Move card within same row\r\n      if (startRowId === finishRowId) {\r\n        const rowId = startRowId;\r\n        const row = startRow;\r\n        const newCardIds = Array.from(row.cardIds);\r\n        newCardIds.splice(startIndex, 1);\r\n        newCardIds.splice(finishIndex, 0, targetCardId);\r\n\r\n        return produce(gameState, (draft) => {\r\n          draft.rows[rowId].cardIds = newCardIds;\r\n        });\r\n      }\r\n\r\n      // Moving from one row to another\r\n      const newStartRowCardIds = Array.from(startRow.cardIds);\r\n      newStartRowCardIds.splice(startIndex, 1);\r\n\r\n      const newFinishRowCardIds = Array.from(finishRow.cardIds);\r\n      newFinishRowCardIds.splice(finishIndex, 0, targetCardId);\r\n\r\n      return produce(gameState, (draft) => {\r\n        draft.rows[startRowId].cardIds = newStartRowCardIds;\r\n        draft.rows[finishRowId].cardIds = newFinishRowCardIds;\r\n      });\r\n    }\r\n\r\n    // Sets player power\r\n    case ACTIONS.SET_POWER: {\r\n      const playerNum = action.payload.playerNum;\r\n      const rowPosition = action.payload.rowPosition;\r\n      const powerValue = action.payload.powerValue;\r\n\r\n      return produce(gameState, (draft) => {\r\n        draft.rows[`player${playerNum}hand`].power[rowPosition] = powerValue;\r\n      });\r\n    }\r\n\r\n    // Sets row synergy\r\n    case ACTIONS.SET_SYNERGY: {\r\n      const rowId = action.payload.rowId;\r\n      const newSynergyVal = action.payload.newSynergyVal;\r\n\r\n      return produce(gameState, (draft) => {\r\n        draft.rows[rowId].synergy = newSynergyVal;\r\n      });\r\n    }\r\n\r\n    // Update value based on previous value\r\n    case ACTIONS.UPDATE_CARD: {\r\n      // Required variables\r\n      const playerNum = action.payload.playerNum;\r\n      const cardId = action.payload.cardId;\r\n      const updateKeys = action.payload.updateKeys;\r\n      const updateValues = action.payload.updateValues;\r\n\r\n      // Identify affected card and apply all updates\r\n      return produce(gameState, (draft) => {\r\n        let targetCard =\r\n          draft.playerCards[`player${playerNum}cards`].cards[cardId];\r\n\r\n        for (let i = 0; i < updateKeys.length; i++) {\r\n          targetCard[updateKeys[i]] += updateValues[i];\r\n        }\r\n      });\r\n    }\r\n\r\n    // Updatesrow synergy\r\n    case ACTIONS.UPDATE_POWER: {\r\n      // Required variables\r\n      const targetPlayer = action.payload.targetPlayer;\r\n      const targetRow = action.payload.targetRow;\r\n      const powerValue = action.payload.powerValue;\r\n\r\n      // Update synergy and set value, minimum of 0 synergy\r\n      return produce(gameState, (draft) => {\r\n        let rowPower = draft.rows[`player${targetPlayer}hand`].power[targetRow];\r\n        rowPower += powerValue;\r\n        const newPower = Math.max(0, rowPower);\r\n        draft.rows[`player${targetPlayer}hand`].power[targetRow] = newPower;\r\n      });\r\n    }\r\n\r\n    // Update value based on previous value\r\n    case ACTIONS.UPDATE_ROW: {\r\n      // Required variables\r\n      const playerNum = action.payload.playerNum;\r\n      const targetRow = action.payload.targetRow;\r\n      const updateKeys = action.payload.updateKeys;\r\n      const updateValues = action.payload.updateValues;\r\n\r\n      // Identify affected card and apply all updates\r\n      return produce(gameState, (draft) => {\r\n        for (let i = 0; i < updateKeys.length; i++) {\r\n          draft.rows[targetRow][updateKeys[i]] += updateValues[i];\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sets row synergy\r\n    case ACTIONS.UPDATE_SYNERGY: {\r\n      // Required variables\r\n      const rowId = action.payload.rowId;\r\n      const synergyCost = action.payload.synergyCost;\r\n\r\n      // Update synergy and set value, minimum of 0 synergy\r\n      return produce(gameState, (draft) => {\r\n        let rowSynergy = draft.rows[rowId].synergy;\r\n        rowSynergy += synergyCost;\r\n        const newSynergy = Math.max(0, rowSynergy);\r\n        draft.rows[rowId].synergy = newSynergy;\r\n      });\r\n    }\r\n\r\n    default:\r\n      return gameState;\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  const [gameState, dispatch] = useReducer(reducer, data);\r\n\r\n  const [matchState, setMatchState] = useState({\r\n    player1: { wins: 0 },\r\n    player2: { wins: 0 },\r\n    wonLastRound: 0,\r\n  });\r\n  const [turnState, setTurnState] = useState({\r\n    turnCount: 1,\r\n    playerTurn: getRandInt(1, 3),\r\n    player1Passed: false,\r\n    player2Passed: false,\r\n  });\r\n  const [cardFocus, setCardFocus] = useState(null);\r\n  const [nextCardDraw, setNextCardDraw] = useState({\r\n    player1: null,\r\n    player2: null,\r\n  });\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n\r\n  // References for setting state inside useEffects\r\n  let matchRef = useRef(null);\r\n\r\n  // End the round and update match scores when both players have passed their turn\r\n  useEffect(() => {\r\n    // Set ref to current match state, alter ref within endRound(), then call setMatchState once using ref as new state\r\n    matchRef.current = matchState;\r\n\r\n    // End the round, calculate who won, update score and move to next round\r\n    const endRound = () => {\r\n      // Get power data\r\n      const totalPower1 = gameState.rows.player1hand.totalPower();\r\n      const totalPower2 = gameState.rows.player2hand.totalPower();\r\n\r\n      // Get player rows info\r\n      const player1Rows = [\r\n        gameState.rows[\"1b\"],\r\n        gameState.rows[\"1m\"],\r\n        gameState.rows[\"1f\"],\r\n      ];\r\n      const player2Rows = [\r\n        gameState.rows[\"2b\"],\r\n        gameState.rows[\"2m\"],\r\n        gameState.rows[\"2f\"],\r\n      ];\r\n\r\n      // Calculate winning player\r\n      let winningPlayer = 0;\r\n\r\n      if (totalPower1 > totalPower2) winningPlayer = 1;\r\n      else if (totalPower2 > totalPower1) winningPlayer = 2;\r\n      // If power is tied, remaining synergy decides the winner\r\n      else if (totalPower1 === totalPower2) {\r\n        let player1Synergy = 0;\r\n        let player2Synergy = 0;\r\n\r\n        for (let row of player1Rows) {\r\n          player1Synergy += row.synergy;\r\n        }\r\n        for (let row of player2Rows) {\r\n          player2Synergy += row.synergy;\r\n        }\r\n\r\n        if (player1Synergy > player2Synergy) winningPlayer = 1;\r\n        else if (player2Synergy > player1Synergy) winningPlayer = 2;\r\n        // If remaining synergy is also tied, it is a draw, denoted by setting player 3 as the winner\r\n        else winningPlayer = 3;\r\n      }\r\n\r\n      // Reset turn state\r\n      // Winner of last round goes first next round. If round was a draw, random player goes first\r\n      setTurnState((prevState) => ({\r\n        turnCount: 1,\r\n        playerTurn:\r\n          winningPlayer === 3\r\n            ? prevState.playerTurn\r\n            : winningPlayer === 1\r\n            ? 1\r\n            : 2,\r\n        player1Passed: false,\r\n        player2Passed: false,\r\n      }));\r\n\r\n      // Update match state\r\n      // Update state if round is a draw\r\n      if (winningPlayer === 3) {\r\n        alert(\"Round is a draw! Both players receive a win.\");\r\n\r\n        // Add a win to both players' record for a draw\r\n        matchRef.current.player1.wins += 1;\r\n        matchRef.current.player2.wins += 1;\r\n\r\n        // If players have drawn both rounds and so both have two wins, match is a draw\r\n        if (matchState.player1.wins === 2 && matchState.player2.wins === 2) {\r\n          alert(\"The match is a draw!\");\r\n          alert(\"Starting a new match.\");\r\n          window.location.reload();\r\n        }\r\n\r\n        // Update state for whichever player won\r\n      } else {\r\n        // Add a win to winner's record\r\n        matchRef.current[`player${winningPlayer}`].wins += 1;\r\n        matchRef.current.wonLastRound = winningPlayer;\r\n        alert(`Player ${winningPlayer} wins the round!`);\r\n      }\r\n\r\n      // Discard all cards\r\n      // Set ids of rows to be reset\r\n      const player1RowIds = [\"1b\", \"1m\", \"1f\"];\r\n      const player2RowIds = [\"2b\", \"2m\", \"2f\"];\r\n\r\n      // Get card ids from every player 1 row\r\n      let player1Cards = [];\r\n      for (let id of player1RowIds) {\r\n        player1Cards.push(gameState.rows[id].cardIds);\r\n      }\r\n\r\n      // Get card ids from every player 2 row\r\n      let player2Cards = [];\r\n      for (let id of player2RowIds) {\r\n        player2Cards.push(gameState.rows[id].cardIds);\r\n      }\r\n\r\n      // Reset power, synergy, effects and discard player 1 cards\r\n      for (let i = 0; i < player1Cards.length; i++) {\r\n        dispatch({\r\n          type: ACTIONS.EDIT_ROW,\r\n          payload: {\r\n            targetRow: player1RowIds[i],\r\n            editKeys: [\"synergy\", \"shield\", \"allyEffects\", \"enemyEffects\"],\r\n            editValues: [0, [], [], []],\r\n          },\r\n        });\r\n        for (let x = 0; x < player1Cards[i].length; x++) {\r\n          dispatch({\r\n            type: ACTIONS.DISCARD_CARD,\r\n            payload: {\r\n              playerNum: 1,\r\n              targetCardId: player1Cards[i][x],\r\n              targetCardRow: player1RowIds[i],\r\n            },\r\n          });\r\n        }\r\n      }\r\n      dispatch({\r\n        type: ACTIONS.EDIT_ROW,\r\n        payload: {\r\n          targetRow: \"player1hand\",\r\n          editKeys: [\"cardsPlayed\", \"power\"],\r\n          editValues: [0, { f: 0, m: 0, b: 0 }],\r\n        },\r\n      });\r\n\r\n      // Reset power, synergy, effects and discard player 2 cards\r\n      for (let i = 0; i < player2Cards.length; i++) {\r\n        dispatch({\r\n          type: ACTIONS.EDIT_ROW,\r\n          payload: {\r\n            targetRow: player2RowIds[i],\r\n            editKeys: [\"synergy\", \"shield\", \"allyEffects\", \"enemyEffects\"],\r\n            editValues: [0, [], [], []],\r\n          },\r\n        });\r\n        for (let x = 0; x < player2Cards[i].length; x++) {\r\n          dispatch({\r\n            type: ACTIONS.DISCARD_CARD,\r\n            payload: {\r\n              playerNum: 2,\r\n              targetCardId: player2Cards[i][x],\r\n              targetCardRow: player2RowIds[i],\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      dispatch({\r\n        type: ACTIONS.EDIT_ROW,\r\n        payload: {\r\n          targetRow: \"player2hand\",\r\n          editKeys: [\"cardsPlayed\", \"power\"],\r\n          editValues: [0, { f: 0, m: 0, b: 0 }],\r\n        },\r\n      });\r\n\r\n      // Set new match state using the ref that was mutated\r\n      setMatchState(matchRef.current);\r\n\r\n      // TODO: create a play again button\r\n      // If a player has reached two wins, end the match and reload the page for a new match\r\n      if (matchState[\"player1\"].wins === 2) {\r\n        alert(\"Player 1 wins the match!\");\r\n        alert(\"Starting a new match.\");\r\n        window.location.reload();\r\n      } else if (matchState[\"player2\"].wins === 2) {\r\n        alert(\"Player 2 wins the match!\");\r\n        alert(\"Starting a new match.\");\r\n        window.location.reload();\r\n      }\r\n    };\r\n    // When both players pass, end the round and move to the next round\r\n    if (turnState.player1Passed === true && turnState.player2Passed === true) {\r\n      endRound();\r\n    }\r\n  }, [turnState, gameState.rows, matchState]);\r\n\r\n  // Handle card dragging\r\n  function handleOnDragEnd(result) {\r\n    const { destination, source, draggableId } = result;\r\n    if (!destination) return;\r\n\r\n    // Get card movement data\r\n    const startRowId = source.droppableId;\r\n    const finishRowId = destination.droppableId;\r\n    const playerNum = turnState.playerTurn;\r\n    const finishPosition = finishRowId[1];\r\n    const heroId = draggableId.slice(1, draggableId.length);\r\n    let finishSynergy = gameState.rows[finishRowId].synergy;\r\n\r\n    // If not moving card within player's hand (i.e. moving into a row),\r\n    // Set new row synergy and set card to played\r\n    if (finishRowId[0] !== \"p\" && parseInt(finishRowId[0]) === playerNum) {\r\n      // Apply card movement\r\n      dispatch({\r\n        type: ACTIONS.MOVE_CARD,\r\n        payload: {\r\n          targetCardId: draggableId,\r\n          startRowId: startRowId,\r\n          finishRowId: finishRowId,\r\n          startIndex: source.index,\r\n          finishIndex: destination.index,\r\n        },\r\n      });\r\n      // If audio is on, play intro audio\r\n      if (playAudio === true) {\r\n        try {\r\n          const introAudio = new Audio(\r\n            require(`assets/audio/${heroId}-intro.mp3`).default\r\n          );\r\n          introAudio.play();\r\n        } catch (err) {\r\n          console.log(\"No intro audio available\");\r\n        }\r\n      }\r\n\r\n      // Set new row synergy\r\n      const addSynergy =\r\n        gameState.playerCards[`player${playerNum}cards`].cards[draggableId]\r\n          .synergy[finishPosition];\r\n\r\n      dispatch({\r\n        type: ACTIONS.UPDATE_SYNERGY,\r\n        payload: {\r\n          rowId: finishRowId,\r\n          synergyCost: addSynergy,\r\n        },\r\n      });\r\n\r\n      // Set card as played and reduce synergy to 0 (so future moves dont also add synergy)\r\n      dispatch({\r\n        type: ACTIONS.EDIT_CARD,\r\n        payload: {\r\n          playerNum: playerNum,\r\n          targetCardId: draggableId,\r\n          editKeys: [\"isPlayed\", \"synergy\"],\r\n          editValues: [true, { f: 0, m: 0, b: 0 }],\r\n        },\r\n      });\r\n\r\n      // Keep track of how many cards have been played\r\n      dispatch({\r\n        type: ACTIONS.UPDATE_ROW,\r\n        payload: {\r\n          targetRow: `player${playerNum}hand`,\r\n          updateKeys: [\"cardsPlayed\"],\r\n          updateValues: [1],\r\n        },\r\n      });\r\n    }\r\n    $(`#${result.source.droppableId}-list`).toggleClass(\"is-drag-origin\");\r\n\r\n    return;\r\n  }\r\n\r\n  // Bug fixes for odd animations when starting a drag under certain conditions\r\n  // e.g. handlist expanding when less than one card's width is available onscreen in horizontal list mode\r\n  function handleOnDragStart(result) {\r\n    console.log(result);\r\n    $(`#${result.source.droppableId}-list`).toggleClass(\"is-drag-origin\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-wrapper\">\r\n      <TitleCard playAudio={playAudio} setPlayAudio={setPlayAudio} />\r\n      <div id=\"landscape-wrapper\">\r\n        <turnContext.Provider value={{ turnState, setTurnState }}>\r\n          <gameContext.Provider value={{ gameState, dispatch }}>\r\n            <DragDropContext\r\n              onDragEnd={handleOnDragEnd}\r\n              onDragStart={handleOnDragStart}\r\n            >\r\n              <PlayerHalf\r\n                playerNum={1}\r\n                setCardFocus={setCardFocus}\r\n                nextCardDraw={nextCardDraw}\r\n                setNextCardDraw={setNextCardDraw}\r\n              />\r\n              <div id=\"center-section\">\r\n                <span>Match</span>\r\n                <div id=\"match-counters\">\r\n                  <MatchCounter playerNum={1} matchState={matchState} />\r\n                  <MatchCounter playerNum={2} matchState={matchState} />\r\n                </div>\r\n                <span>Score</span>\r\n              </div>\r\n              <PlayerHalf\r\n                playerNum={2}\r\n                setCardFocus={setCardFocus}\r\n                nextCardDraw={nextCardDraw}\r\n                setNextCardDraw={setNextCardDraw}\r\n              />\r\n            </DragDropContext>\r\n            {cardFocus !== null && (\r\n              <CardFocus\r\n                setCardFocus={setCardFocus}\r\n                unsetCardFocus={() => {\r\n                  setCardFocus(\"invisible\");\r\n                  console.log(`cardfocus is ${JSON.stringify(cardFocus)}`);\r\n                }}\r\n                cardFocus={cardFocus}\r\n                setNextCardDraw={setNextCardDraw}\r\n                playAudio={playAudio}\r\n              />\r\n            )}\r\n          </gameContext.Provider>\r\n        </turnContext.Provider>\r\n      </div>\r\n      <Tutorial />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}